
I2C_tx_by_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007d18  08007d18  00017d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000007c  08008088  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08008088  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132ad  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241a  00000000  00000000  00033359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00035778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00036768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023399  00000000  00000000  000376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136a8  00000000  00000000  0005aa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4a31  00000000  00000000  0006e0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142b1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  00142b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d00 	.word	0x08007d00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007d00 	.word	0x08007d00

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_I2C_MasterTxCpltCallback>:
uint8_t timer[8];
char msg[5];
float time_res=0;
int flag=0;
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  flag=1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000009c 	.word	0x2000009c

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	unsigned short int start_time=0,stop_time=0,time_diff=0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	807b      	strh	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fc33 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f86d 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 f9c1 	bl	8001264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee2:	f000 f995 	bl	8001210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ee6:	f000 f8c7 	bl	8001078 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000eea:	f000 f8f3 	bl	80010d4 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000eee:	4828      	ldr	r0, [pc, #160]	; (8000f90 <main+0xcc>)
 8000ef0:	f003 fac6 	bl	8004480 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */

 HAL_I2C_Master_Transmit_IT(&hi2c1, 14<<1, (uint8_t *)tx_data, sizeof(tx_data));
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <main+0xd0>)
 8000ef8:	211c      	movs	r1, #28
 8000efa:	4827      	ldr	r0, [pc, #156]	; (8000f98 <main+0xd4>)
 8000efc:	f001 f904 	bl	8002108 <HAL_I2C_Master_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	             if(flag==1)
 8000f00:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <main+0xd8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d13d      	bne.n	8000f84 <main+0xc0>
	             {
	            	 flag=0;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <main+0xd8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	            	 start_time =__HAL_TIM_GET_COUNTER(&htim1);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <main+0xcc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	80fb      	strh	r3, [r7, #6]
	             	 if(HAL_I2C_Master_Transmit_IT(&hi2c1, 14<<1, (uint8_t *)tx_data, sizeof(tx_data))==HAL_OK)
 8000f16:	230c      	movs	r3, #12
 8000f18:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <main+0xd0>)
 8000f1a:	211c      	movs	r1, #28
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <main+0xd4>)
 8000f1e:	f001 f8f3 	bl	8002108 <HAL_I2C_Master_Transmit_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d12d      	bne.n	8000f84 <main+0xc0>
	                  {
	            	 	  	   stop_time =__HAL_TIM_GET_COUNTER(&htim1);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <main+0xcc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	80bb      	strh	r3, [r7, #4]
	            	 	  	   time_diff = stop_time - start_time;
 8000f30:	88ba      	ldrh	r2, [r7, #4]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	807b      	strh	r3, [r7, #2]
	            	 	  	   time_res = (float)(time_diff*1000000)/CLK_FRQ;
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <main+0xdc>)
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000fa4 <main+0xe0>
 8000f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <main+0xe4>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	            	 	  	 //  sprintf(timer,"%d",time_res);
	            	 	  	   gcvt(time_res,8,timer);
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <main+0xe4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb0c 	bl	8000578 <__aeabi_f2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4911      	ldr	r1, [pc, #68]	; (8000fac <main+0xe8>)
 8000f66:	2008      	movs	r0, #8
 8000f68:	ec43 2b10 	vmov	d0, r2, r3
 8000f6c:	f004 fb3c 	bl	80055e8 <gcvt>
	            	 	  	   HAL_UART_Transmit(&huart2, (uint8_t *)timer, sizeof(timer), 100);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	2208      	movs	r2, #8
 8000f74:	490d      	ldr	r1, [pc, #52]	; (8000fac <main+0xe8>)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <main+0xec>)
 8000f78:	f004 f86d 	bl	8005056 <HAL_UART_Transmit>
	            	 	  	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <main+0xf0>)
 8000f80:	f000 ff63 	bl	8001e4a <HAL_GPIO_TogglePin>
//	            	 	  	 }


	             }

	             HAL_Delay(500);
 8000f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f88:	f000 fc4c 	bl	8001824 <HAL_Delay>
	             if(flag==1)
 8000f8c:	e7b8      	b.n	8000f00 <main+0x3c>
 8000f8e:	bf00      	nop
 8000f90:	20000110 	.word	0x20000110
 8000f94:	20000000 	.word	0x20000000
 8000f98:	200000b4 	.word	0x200000b4
 8000f9c:	2000009c 	.word	0x2000009c
 8000fa0:	000f4240 	.word	0x000f4240
 8000fa4:	4b742400 	.word	0x4b742400
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	20000158 	.word	0x20000158
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 fb5c 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <SystemClock_Config+0xb8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	4a22      	ldr	r2, [pc, #136]	; (8001070 <SystemClock_Config+0xb8>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	; 0x40
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <SystemClock_Config+0xb8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <SystemClock_Config+0xbc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <SystemClock_Config+0xbc>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <SystemClock_Config+0xbc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4618      	mov	r0, r3
 800102e:	f002 ff39 	bl	8003ea4 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001038:	f000 f964 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fcae 	bl	80039b8 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001062:	f000 f94f 	bl	8001304 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3750      	adds	r7, #80	; 0x50
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C1_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C1_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C1_Init+0x50>)
 80010b6:	f000 fee3 	bl	8001e80 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f920 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000b4 	.word	0x200000b4
 80010cc:	40005400 	.word	0x40005400
 80010d0:	000186a0 	.word	0x000186a0

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2220      	movs	r2, #32
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fab9 	bl	8005684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <MX_TIM1_Init+0x134>)
 8001114:	4a3d      	ldr	r2, [pc, #244]	; (800120c <MX_TIM1_Init+0x138>)
 8001116:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001118:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <MX_TIM1_Init+0x134>)
 800111a:	2201      	movs	r2, #1
 800111c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <MX_TIM1_Init+0x134>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <MX_TIM1_Init+0x134>)
 8001126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <MX_TIM1_Init+0x134>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MX_TIM1_Init+0x134>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_TIM1_Init+0x134>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113e:	4832      	ldr	r0, [pc, #200]	; (8001208 <MX_TIM1_Init+0x134>)
 8001140:	f003 f94e 	bl	80043e0 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800114a:	f000 f8db 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001158:	4619      	mov	r1, r3
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <MX_TIM1_Init+0x134>)
 800115c:	f003 faae 	bl	80046bc <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001166:	f000 f8cd 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <MX_TIM1_Init+0x134>)
 800116c:	f003 f9f0 	bl	8004550 <HAL_TIM_OC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001176:	f000 f8c5 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001186:	4619      	mov	r1, r3
 8001188:	481f      	ldr	r0, [pc, #124]	; (8001208 <MX_TIM1_Init+0x134>)
 800118a:	f003 fe49 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001194:	f000 f8b6 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_TIM1_Init+0x134>)
 80011be:	f003 fa21 	bl	8004604 <HAL_TIM_OC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011c8:	f000 f89c 	bl	8001304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM1_Init+0x134>)
 80011f0:	f003 fe92 	bl	8004f18 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80011fa:	f000 f883 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3758      	adds	r7, #88	; 0x58
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000110 	.word	0x20000110
 800120c:	40010000 	.word	0x40010000

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART2_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001248:	f003 feb8 	bl	8004fbc <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f000 f857 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000158 	.word	0x20000158
 8001260:	40004400 	.word	0x40004400

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_GPIO_Init+0x98>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <MX_GPIO_Init+0x98>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_GPIO_Init+0x98>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_GPIO_Init+0x98>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <MX_GPIO_Init+0x98>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_GPIO_Init+0x98>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_GPIO_Init+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <MX_GPIO_Init+0x98>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_GPIO_Init+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2120      	movs	r1, #32
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <MX_GPIO_Init+0x9c>)
 80012d4:	f000 fda0 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012d8:	2320      	movs	r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_GPIO_Init+0x9c>)
 80012f0:	f000 fbfe 	bl	8001af0 <HAL_GPIO_Init>

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_I2C_MspInit+0x94>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800139e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b0:	2304      	movs	r3, #4
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <HAL_I2C_MspInit+0x9c>)
 80013bc:	f000 fb98 	bl	8001af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 80013ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_I2C_MspInit+0x98>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	201f      	movs	r0, #31
 80013e2:	f000 fb1e 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013e6:	201f      	movs	r0, #31
 80013e8:	f000 fb37 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_TIM_Base_MspInit+0x3c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d10d      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_TIM_Base_MspInit+0x40>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_UART_MspInit+0x88>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x88>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ae:	2307      	movs	r3, #7
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0x8c>)
 80014ba:	f000 fb19 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f960 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <I2C1_EV_IRQHandler+0x10>)
 800152e:	f000 fe91 	bl	8002254 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000b4 	.word	0x200000b4

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001556:	f004 f86b 	bl	8005630 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
	return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
	while (1) {}		/* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
	}

return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
	}
	return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f003 ffd0 	bl	8005630 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200000a0 	.word	0x200000a0
 80016c4:	200001b0 	.word	0x200001b0

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f2:	490e      	ldr	r1, [pc, #56]	; (800172c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001708:	4c0b      	ldr	r4, [pc, #44]	; (8001738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001716:	f7ff ffd7 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f003 ff8f 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fbd1 	bl	8000ec4 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001730:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 8001734:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001738:	200001b0 	.word	0x200001b0

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f94f 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fdcc 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f967 	bl	8001a76 <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f92f 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000014 	.word	0x20000014
 80017e0:	20000010 	.word	0x20000010

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000014 	.word	0x20000014
 8001808:	2000019c 	.word	0x2000019c

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	2000019c 	.word	0x2000019c

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000014 	.word	0x20000014

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff29 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff3e 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff31 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa2 	bl	80019c8 <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d004      	beq.n	8001aac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e00c      	b.n	8001ac6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e165      	b.n	8001dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8154 	bne.w	8001dd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d005      	beq.n	8001b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d130      	bne.n	8001ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	2201      	movs	r2, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 0201 	and.w	r2, r3, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d017      	beq.n	8001be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d123      	bne.n	8001c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80ae 	beq.w	8001dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_GPIO_Init+0x300>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c92:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x308>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d025      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x30c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x310>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x206>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_GPIO_Init+0x320>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x202>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00c      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e00a      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x21c>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x304>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_GPIO_Init+0x324>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f ae96 	bls.w	8001b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40021400 	.word	0x40021400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e12b      	b.n	80020ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fa5a 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ee4:	f001 fe5a 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d807      	bhi.n	8001f04 <HAL_I2C_Init+0x84>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a80      	ldr	r2, [pc, #512]	; (80020f8 <HAL_I2C_Init+0x278>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e006      	b.n	8001f12 <HAL_I2C_Init+0x92>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a7d      	ldr	r2, [pc, #500]	; (80020fc <HAL_I2C_Init+0x27c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0e7      	b.n	80020ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a78      	ldr	r2, [pc, #480]	; (8002100 <HAL_I2C_Init+0x280>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0c9b      	lsrs	r3, r3, #18
 8001f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d802      	bhi.n	8001f54 <HAL_I2C_Init+0xd4>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3301      	adds	r3, #1
 8001f52:	e009      	b.n	8001f68 <HAL_I2C_Init+0xe8>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	4a69      	ldr	r2, [pc, #420]	; (8002104 <HAL_I2C_Init+0x284>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	3301      	adds	r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	495c      	ldr	r1, [pc, #368]	; (80020f4 <HAL_I2C_Init+0x274>)
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d819      	bhi.n	8001fbc <HAL_I2C_Init+0x13c>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e59      	subs	r1, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f96:	1c59      	adds	r1, r3, #1
 8001f98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_I2C_Init+0x138>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e59      	subs	r1, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb6:	e051      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e04f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_I2C_Init+0x168>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e012      	b.n	800200e <HAL_I2C_Init+0x18e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Init+0x196>
 8002012:	2301      	movs	r3, #1
 8002014:	e022      	b.n	800205c <HAL_I2C_Init+0x1dc>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10e      	bne.n	800203c <HAL_I2C_Init+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e58      	subs	r0, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	440b      	add	r3, r1
 800202c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002030:	3301      	adds	r3, #1
 8002032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	e00f      	b.n	800205c <HAL_I2C_Init+0x1dc>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	0099      	lsls	r1, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002052:	3301      	adds	r3, #1
 8002054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	6809      	ldr	r1, [r1, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800208a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6911      	ldr	r1, [r2, #16]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	000186a0 	.word	0x000186a0
 80020f8:	001e847f 	.word	0x001e847f
 80020fc:	003d08ff 	.word	0x003d08ff
 8002100:	431bde83 	.word	0x431bde83
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	817b      	strh	r3, [r7, #10]
 8002118:	4613      	mov	r3, r2
 800211a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b20      	cmp	r3, #32
 800212a:	f040 8085 	bne.w	8002238 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_I2C_Master_Transmit_IT+0x144>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a1a      	lsrs	r2, r3, #8
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009a      	lsls	r2, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3b01      	subs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d116      	bne.n	8002182 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e05b      	b.n	800223a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d0db      	beq.n	8002148 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_I2C_Master_Transmit_IT+0x96>
 800219a:	2302      	movs	r3, #2
 800219c:	e04d      	b.n	800223a <HAL_I2C_Master_Transmit_IT+0x132>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d007      	beq.n	80021c4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2221      	movs	r2, #33	; 0x21
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2210      	movs	r2, #16
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	893a      	ldrh	r2, [r7, #8]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <HAL_I2C_Master_Transmit_IT+0x148>)
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002206:	897a      	ldrh	r2, [r7, #10]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002222:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	14f8b589 	.word	0x14f8b589
 8002250:	ffff0000 	.word	0xffff0000

08002254 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002274:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d003      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x38>
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	f040 80c1 	bne.w	800240e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80022ac:	d003      	beq.n	80022b6 <HAL_I2C_EV_IRQHandler+0x62>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_EV_IRQHandler+0x66>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x68>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f000 8132 	beq.w	8002526 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0x92>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f001 fb51 	bl	8003980 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fcc8 	bl	8002c74 <I2C_Master_SB>
 80022e4:	e092      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xb2>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0a5b      	lsrs	r3, r3, #9
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fd3e 	bl	8002d80 <I2C_Master_ADD10>
 8002304:	e082      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0xd2>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	0a5b      	lsrs	r3, r3, #9
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fd58 	bl	8002dd4 <I2C_Master_ADDR>
 8002324:	e072      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d03b      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002340:	f000 80f3 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	09db      	lsrs	r3, r3, #7
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f942 	bl	80025f2 <I2C_MasterTransmit_TXE>
 800236e:	e04d      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80d6 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	0a5b      	lsrs	r3, r3, #9
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80cf 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	2b21      	cmp	r3, #33	; 0x21
 8002390:	d103      	bne.n	800239a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9c9 	bl	800272a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002398:	e0c7      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	f040 80c4 	bne.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa37 	bl	8002816 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a8:	e0bf      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b8:	f000 80b7 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 faac 	bl	800293e <I2C_MasterReceive_RXNE>
 80023e6:	e011      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 809a 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	0a5b      	lsrs	r3, r3, #9
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8093 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fb4b 	bl	8002aa0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800240a:	e08e      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 800240c:	e08d      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e007      	b.n	8002430 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x20e>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 ff09 	bl	8003272 <I2C_Slave_ADDR>
 8002460:	e066      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_I2C_EV_IRQHandler+0x22e>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	0a5b      	lsrs	r3, r3, #9
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 ff44 	bl	8003308 <I2C_Slave_STOPF>
 8002480:	e056      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	2b21      	cmp	r3, #33	; 0x21
 8002486:	d002      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x23a>
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	2b29      	cmp	r3, #41	; 0x29
 800248c:	d125      	bne.n	80024da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	09db      	lsrs	r3, r3, #7
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00f      	beq.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	0a9b      	lsrs	r3, r3, #10
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fe1f 	bl	80030f6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b8:	e039      	b.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d033      	beq.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02d      	beq.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fe4c 	bl	8003170 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d8:	e029      	b.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	0a9b      	lsrs	r3, r3, #10
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fe57 	bl	80031b2 <I2C_SlaveReceive_RXNE>
 8002504:	e014      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	0a5b      	lsrs	r3, r3, #9
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fe85 	bl	800322e <I2C_SlaveReceive_BTF>
 8002524:	e004      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800252e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
 800257e:	4613      	mov	r3, r2
 8002580:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002608:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d150      	bne.n	80026ba <I2C_MasterTransmit_TXE+0xc8>
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b21      	cmp	r3, #33	; 0x21
 800261c:	d14d      	bne.n	80026ba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d01d      	beq.n	8002660 <I2C_MasterTransmit_TXE+0x6e>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b20      	cmp	r3, #32
 8002628:	d01a      	beq.n	8002660 <I2C_MasterTransmit_TXE+0x6e>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002630:	d016      	beq.n	8002660 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002640:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2211      	movs	r2, #17
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fc23 	bl	8000ea4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800265e:	e060      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800266e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d107      	bne.n	80026aa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff7d 	bl	80025a2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026a8:	e03b      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fbf6 	bl	8000ea4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026b8:	e033      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b21      	cmp	r3, #33	; 0x21
 80026be:	d005      	beq.n	80026cc <I2C_MasterTransmit_TXE+0xda>
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d12d      	bne.n	8002722 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b22      	cmp	r3, #34	; 0x22
 80026ca:	d12a      	bne.n	8002722 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80026e6:	e01c      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d103      	bne.n	80026fc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f88e 	bl	8002816 <I2C_MemoryTransmit_TXE_BTF>
}
 80026fa:	e012      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002720:	e7ff      	b.n	8002722 <I2C_MasterTransmit_TXE+0x130>
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b21      	cmp	r3, #33	; 0x21
 8002742:	d164      	bne.n	800280e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002772:	e04c      	b.n	800280e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d01d      	beq.n	80027b6 <I2C_MasterTransmit_BTF+0x8c>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d01a      	beq.n	80027b6 <I2C_MasterTransmit_BTF+0x8c>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002786:	d016      	beq.n	80027b6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002796:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2211      	movs	r2, #17
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fb78 	bl	8000ea4 <HAL_I2C_MasterTxCpltCallback>
}
 80027b4:	e02b      	b.n	800280e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027c4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d107      	bne.n	8002800 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fed2 	bl	80025a2 <HAL_I2C_MemTxCpltCallback>
}
 80027fe:	e006      	b.n	800280e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fb4b 	bl	8000ea4 <HAL_I2C_MasterTxCpltCallback>
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10b      	bne.n	800284e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283a:	b2da      	uxtb	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800284c:	e073      	b.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002852:	b29b      	uxth	r3, r3
 8002854:	121b      	asrs	r3, r3, #8
 8002856:	b2da      	uxtb	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002868:	e065      	b.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286e:	2b01      	cmp	r3, #1
 8002870:	d10b      	bne.n	800288a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002876:	b2da      	uxtb	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002888:	e055      	b.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b02      	cmp	r3, #2
 8002890:	d151      	bne.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b22      	cmp	r3, #34	; 0x22
 8002896:	d10d      	bne.n	80028b4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028b2:	e040      	b.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b21      	cmp	r3, #33	; 0x21
 80028c2:	d112      	bne.n	80028ea <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028e8:	e025      	b.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d120      	bne.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b21      	cmp	r3, #33	; 0x21
 80028f8:	d11d      	bne.n	8002936 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002908:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fe36 	bl	80025a2 <HAL_I2C_MemTxCpltCallback>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b22      	cmp	r3, #34	; 0x22
 8002950:	f040 80a2 	bne.w	8002a98 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d921      	bls.n	80029a6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b03      	cmp	r3, #3
 8002990:	f040 8082 	bne.w	8002a98 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80029a4:	e078      	b.n	8002a98 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d074      	beq.n	8002a98 <I2C_MasterReceive_RXNE+0x15a>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <I2C_MasterReceive_RXNE+0x7c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d16e      	bne.n	8002a98 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 ffae 	bl	800391c <I2C_WaitOnSTOPRequestThroughIT>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d142      	bne.n	8002a4c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b40      	cmp	r3, #64	; 0x40
 8002a1e:	d10a      	bne.n	8002a36 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fdc1 	bl	80025b6 <HAL_I2C_MemRxCpltCallback>
}
 8002a34:	e030      	b.n	8002a98 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2212      	movs	r2, #18
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fd76 	bl	8002536 <HAL_I2C_MasterRxCpltCallback>
}
 8002a4a:	e025      	b.n	8002a98 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fd99 	bl	80025ca <HAL_I2C_ErrorCallback>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d11b      	bne.n	8002af0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002aee:	e0bd      	b.n	8002c6c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d129      	bne.n	8002b4e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d00a      	beq.n	8002b26 <I2C_MasterReceive_BTF+0x86>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d007      	beq.n	8002b26 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b4c:	e08e      	b.n	8002c6c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d176      	bne.n	8002c46 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <I2C_MasterReceive_BTF+0xc4>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d108      	bne.n	8002b76 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e019      	b.n	8002baa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d002      	beq.n	8002b82 <I2C_MasterReceive_BTF+0xe2>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d108      	bne.n	8002b94 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e00a      	b.n	8002baa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d007      	beq.n	8002baa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d10a      	bne.n	8002c30 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fcc4 	bl	80025b6 <HAL_I2C_MemRxCpltCallback>
}
 8002c2e:	e01d      	b.n	8002c6c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2212      	movs	r2, #18
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fc79 	bl	8002536 <HAL_I2C_MasterRxCpltCallback>
}
 8002c44:	e012      	b.n	8002c6c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d117      	bne.n	8002cb8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002ca2:	e067      	b.n	8002d74 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
}
 8002cb6:	e05d      	b.n	8002d74 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc0:	d133      	bne.n	8002d2a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b21      	cmp	r3, #33	; 0x21
 8002ccc:	d109      	bne.n	8002ce2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	e008      	b.n	8002cf4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <I2C_Master_SB+0x92>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d032      	beq.n	8002d74 <I2C_Master_SB+0x100>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02d      	beq.n	8002d74 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d26:	605a      	str	r2, [r3, #4]
}
 8002d28:	e024      	b.n	8002d74 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	11db      	asrs	r3, r3, #7
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0306 	and.w	r3, r3, #6
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f063 030f 	orn	r3, r3, #15
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	e011      	b.n	8002d74 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10d      	bne.n	8002d74 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	11db      	asrs	r3, r3, #7
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0306 	and.w	r3, r3, #6
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f063 030e 	orn	r3, r3, #14
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <I2C_Master_ADD10+0x26>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d108      	bne.n	8002db8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <I2C_Master_ADD10+0x48>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	605a      	str	r2, [r3, #4]
  }
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b091      	sub	sp, #68	; 0x44
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b22      	cmp	r3, #34	; 0x22
 8002dfc:	f040 8169 	bne.w	80030d2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10f      	bne.n	8002e28 <I2C_Master_ADDR+0x54>
 8002e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d10b      	bne.n	8002e28 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e10:	2300      	movs	r3, #0
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	e160      	b.n	80030ea <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11d      	bne.n	8002e6c <I2C_Master_ADDR+0x98>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e38:	d118      	bne.n	8002e6c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50
 8002e6a:	e13e      	b.n	80030ea <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d113      	bne.n	8002e9e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e115      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 808a 	bne.w	8002fbe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb0:	d137      	bne.n	8002f22 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed0:	d113      	bne.n	8002efa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	e0e7      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	623b      	str	r3, [r7, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e0d3      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d02e      	beq.n	8002f86 <I2C_Master_ADDR+0x1b2>
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d02b      	beq.n	8002f86 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d102      	bne.n	8002f3a <I2C_Master_ADDR+0x166>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d125      	bne.n	8002f86 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00e      	beq.n	8002f5e <I2C_Master_ADDR+0x18a>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d00b      	beq.n	8002f5e <I2C_Master_ADDR+0x18a>
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d008      	beq.n	8002f5e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e007      	b.n	8002f6e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	e0a1      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e085      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d14d      	bne.n	8003064 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d016      	beq.n	8002ffc <I2C_Master_ADDR+0x228>
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d013      	beq.n	8002ffc <I2C_Master_ADDR+0x228>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d010      	beq.n	8002ffc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800300a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d117      	bne.n	800304c <I2C_Master_ADDR+0x278>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003022:	d00b      	beq.n	800303c <I2C_Master_ADDR+0x268>
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	2b01      	cmp	r3, #1
 8003028:	d008      	beq.n	800303c <I2C_Master_ADDR+0x268>
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	2b08      	cmp	r3, #8
 800302e:	d005      	beq.n	800303c <I2C_Master_ADDR+0x268>
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	2b10      	cmp	r3, #16
 8003034:	d002      	beq.n	800303c <I2C_Master_ADDR+0x268>
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b20      	cmp	r3, #32
 800303a:	d107      	bne.n	800304c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800304a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	e032      	b.n	80030ca <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003072:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d117      	bne.n	80030b4 <I2C_Master_ADDR+0x2e0>
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800308a:	d00b      	beq.n	80030a4 <I2C_Master_ADDR+0x2d0>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	2b01      	cmp	r3, #1
 8003090:	d008      	beq.n	80030a4 <I2C_Master_ADDR+0x2d0>
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2b08      	cmp	r3, #8
 8003096:	d005      	beq.n	80030a4 <I2C_Master_ADDR+0x2d0>
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	2b10      	cmp	r3, #16
 800309c:	d002      	beq.n	80030a4 <I2C_Master_ADDR+0x2d0>
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d107      	bne.n	80030b4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80030d0:	e00b      	b.n	80030ea <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	e7ff      	b.n	80030ea <I2C_Master_ADDR+0x316>
 80030ea:	bf00      	nop
 80030ec:	3744      	adds	r7, #68	; 0x44
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02b      	beq.n	8003168 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d114      	bne.n	8003168 <I2C_SlaveTransmit_TXE+0x72>
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b29      	cmp	r3, #41	; 0x29
 8003142:	d111      	bne.n	8003168 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2228      	movs	r2, #40	; 0x28
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff f9f1 	bl	800254a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d011      	beq.n	80031a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02c      	beq.n	8003226 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d114      	bne.n	8003226 <I2C_SlaveReceive_RXNE+0x74>
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003200:	d111      	bne.n	8003226 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003210:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2222      	movs	r2, #34	; 0x22
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2228      	movs	r2, #40	; 0x28
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff f99c 	bl	800255e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800328c:	2b28      	cmp	r3, #40	; 0x28
 800328e:	d127      	bne.n	80032e0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	09db      	lsrs	r3, r3, #7
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	81bb      	strh	r3, [r7, #12]
 80032c2:	e002      	b.n	80032ca <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80032d2:	89ba      	ldrh	r2, [r7, #12]
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff f94a 	bl	8002572 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032de:	e00e      	b.n	80032fe <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003316:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003326:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d172      	bne.n	800344c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b22      	cmp	r3, #34	; 0x22
 800336a:	d002      	beq.n	8003372 <I2C_Slave_STOPF+0x6a>
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b2a      	cmp	r3, #42	; 0x2a
 8003370:	d135      	bne.n	80033de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b29a      	uxth	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fb91 	bl	8001ad2 <HAL_DMA_GetState>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d049      	beq.n	800344a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	4a69      	ldr	r2, [pc, #420]	; (8003560 <I2C_Slave_STOPF+0x258>)
 80033bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fb63 	bl	8001a8e <HAL_DMA_Abort_IT>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03d      	beq.n	800344a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d8:	4610      	mov	r0, r2
 80033da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033dc:	e035      	b.n	800344a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0204 	orr.w	r2, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003410:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fb5b 	bl	8001ad2 <HAL_DMA_GetState>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d014      	beq.n	800344c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <I2C_Slave_STOPF+0x258>)
 8003428:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fb2d 	bl	8001a8e <HAL_DMA_Abort_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003444:	4610      	mov	r0, r2
 8003446:	4798      	blx	r3
 8003448:	e000      	b.n	800344c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800344a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03e      	beq.n	80034d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d112      	bne.n	800348a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d112      	bne.n	80034be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f843 	bl	8003568 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034e2:	e039      	b.n	8003558 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b2a      	cmp	r3, #42	; 0x2a
 80034e8:	d109      	bne.n	80034fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2228      	movs	r2, #40	; 0x28
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff f830 	bl	800255e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b28      	cmp	r3, #40	; 0x28
 8003508:	d111      	bne.n	800352e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <I2C_Slave_STOPF+0x25c>)
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff f831 	bl	800258e <HAL_I2C_ListenCpltCallback>
}
 800352c:	e014      	b.n	8003558 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	2b22      	cmp	r3, #34	; 0x22
 8003534:	d002      	beq.n	800353c <I2C_Slave_STOPF+0x234>
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b22      	cmp	r3, #34	; 0x22
 800353a:	d10d      	bne.n	8003558 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff f803 	bl	800255e <HAL_I2C_SlaveRxCpltCallback>
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	080037cd 	.word	0x080037cd
 8003564:	ffff0000 	.word	0xffff0000

08003568 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d002      	beq.n	800358c <I2C_ITError+0x24>
 8003586:	7bbb      	ldrb	r3, [r7, #14]
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d10a      	bne.n	80035a2 <I2C_ITError+0x3a>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b22      	cmp	r3, #34	; 0x22
 8003590:	d107      	bne.n	80035a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035a8:	2b28      	cmp	r3, #40	; 0x28
 80035aa:	d107      	bne.n	80035bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2228      	movs	r2, #40	; 0x28
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035ba:	e015      	b.n	80035e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ca:	d00a      	beq.n	80035e2 <I2C_ITError+0x7a>
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b60      	cmp	r3, #96	; 0x60
 80035d0:	d007      	beq.n	80035e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f6:	d162      	bne.n	80036be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d020      	beq.n	8003658 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <I2C_ITError+0x25c>)
 800361c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fa33 	bl	8001a8e <HAL_DMA_Abort_IT>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8089 	beq.w	8003742 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
 8003656:	e074      	b.n	8003742 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	4a59      	ldr	r2, [pc, #356]	; (80037c4 <I2C_ITError+0x25c>)
 800365e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fa12 	bl	8001a8e <HAL_DMA_Abort_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d068      	beq.n	8003742 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d10b      	bne.n	8003696 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
 80036bc:	e041      	b.n	8003742 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b60      	cmp	r3, #96	; 0x60
 80036c8:	d125      	bne.n	8003716 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d10b      	bne.n	80036fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe ff65 	bl	80025de <HAL_I2C_AbortCpltCallback>
 8003714:	e015      	b.n	8003742 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d10b      	bne.n	800373c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fe ff44 	bl	80025ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d113      	bne.n	80037bc <I2C_ITError+0x254>
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b28      	cmp	r3, #40	; 0x28
 8003798:	d110      	bne.n	80037bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <I2C_ITError+0x260>)
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fe fee9 	bl	800258e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	080037cd 	.word	0x080037cd
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <I2C_DMAAbort+0x148>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	08db      	lsrs	r3, r3, #3
 80037ec:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <I2C_DMAAbort+0x14c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a1a      	lsrs	r2, r3, #8
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003812:	e00a      	b.n	800382a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b01      	subs	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d0ea      	beq.n	8003800 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	2200      	movs	r2, #0
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	2200      	movs	r2, #0
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	2200      	movs	r2, #0
 800386e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	2200      	movs	r2, #0
 800387e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d10e      	bne.n	80038ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038b2:	6978      	ldr	r0, [r7, #20]
 80038b4:	f7fe fe93 	bl	80025de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038b8:	e027      	b.n	800390a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038c0:	2b28      	cmp	r3, #40	; 0x28
 80038c2:	d117      	bne.n	80038f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2228      	movs	r2, #40	; 0x28
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038f2:	e007      	b.n	8003904 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003904:	6978      	ldr	r0, [r7, #20]
 8003906:	f7fe fe60 	bl	80025ca <HAL_I2C_ErrorCallback>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000000c 	.word	0x2000000c
 8003918:	14f8b589 	.word	0x14f8b589

0800391c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	0a1a      	lsrs	r2, r3, #8
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b01      	subs	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e008      	b.n	800396c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d0e9      	beq.n	800393e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	2000000c 	.word	0x2000000c
 800397c:	14f8b589 	.word	0x14f8b589

08003980 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003990:	d103      	bne.n	800399a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003998:	e007      	b.n	80039aa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039a2:	d102      	bne.n	80039aa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2208      	movs	r2, #8
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cc      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d90c      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e067      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4934      	ldr	r1, [pc, #208]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd feb0 	bl	800180c <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd feac 	bl	800180c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20c      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f855 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fe10 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08007d18 	.word	0x08007d18
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	20000010 	.word	0x20000010

08003b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	2000000c 	.word	0x2000000c

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ba0:	f7ff fff0 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	08007d28 	.word	0x08007d28

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bc8:	f7ff ffdc 	bl	8003b84 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	0b5b      	lsrs	r3, r3, #13
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08007d28 	.word	0x08007d28

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8003c00:	2600      	movs	r6, #0
 8003c02:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c04:	2600      	movs	r6, #0
 8003c06:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4ea3      	ldr	r6, [pc, #652]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003c0a:	68b6      	ldr	r6, [r6, #8]
 8003c0c:	f006 060c 	and.w	r6, r6, #12
 8003c10:	2e0c      	cmp	r6, #12
 8003c12:	f200 8137 	bhi.w	8003e84 <HAL_RCC_GetSysClockFreq+0x298>
 8003c16:	f20f 0c08 	addw	ip, pc, #8
 8003c1a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003e85 	.word	0x08003e85
 8003c28:	08003e85 	.word	0x08003e85
 8003c2c:	08003e85 	.word	0x08003e85
 8003c30:	08003c5b 	.word	0x08003c5b
 8003c34:	08003e85 	.word	0x08003e85
 8003c38:	08003e85 	.word	0x08003e85
 8003c3c:	08003e85 	.word	0x08003e85
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003e85 	.word	0x08003e85
 8003c48:	08003e85 	.word	0x08003e85
 8003c4c:	08003e85 	.word	0x08003e85
 8003c50:	08003d77 	.word	0x08003d77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b91      	ldr	r3, [pc, #580]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003c56:	613b      	str	r3, [r7, #16]
       break;
 8003c58:	e117      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5a:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003c5c:	613b      	str	r3, [r7, #16]
      break;
 8003c5e:	e114      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b8d      	ldr	r3, [pc, #564]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d024      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c76:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	099b      	lsrs	r3, r3, #6
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c86:	f04f 0500 	mov.w	r5, #0
 8003c8a:	ea02 0004 	and.w	r0, r2, r4
 8003c8e:	ea03 0105 	and.w	r1, r3, r5
 8003c92:	4b83      	ldr	r3, [pc, #524]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003c94:	fb03 f201 	mul.w	r2, r3, r1
 8003c98:	2300      	movs	r3, #0
 8003c9a:	fb03 f300 	mul.w	r3, r3, r0
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a7f      	ldr	r2, [pc, #508]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003ca2:	fba0 0102 	umull	r0, r1, r0, r2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f7fc ff7b 	bl	8000bac <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4613      	mov	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e04c      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	ea02 0800 	and.w	r8, r2, r0
 8003cd8:	ea03 0901 	and.w	r9, r3, r1
 8003cdc:	4640      	mov	r0, r8
 8003cde:	4649      	mov	r1, r9
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	014b      	lsls	r3, r1, #5
 8003cea:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cee:	0142      	lsls	r2, r0, #5
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	ebb0 0008 	subs.w	r0, r0, r8
 8003cf8:	eb61 0109 	sbc.w	r1, r1, r9
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	018b      	lsls	r3, r1, #6
 8003d06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d0a:	0182      	lsls	r2, r0, #6
 8003d0c:	1a12      	subs	r2, r2, r0
 8003d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	00d9      	lsls	r1, r3, #3
 8003d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d20:	00d0      	lsls	r0, r2, #3
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	eb12 0208 	adds.w	r2, r2, r8
 8003d2a:	eb43 0309 	adc.w	r3, r3, r9
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	0299      	lsls	r1, r3, #10
 8003d38:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d3c:	0290      	lsls	r0, r2, #10
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	f7fc ff2d 	bl	8000bac <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4613      	mov	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	3301      	adds	r3, #1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	613b      	str	r3, [r7, #16]
      break;
 8003d74:	e089      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d76:	4948      	ldr	r1, [pc, #288]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003d78:	6849      	ldr	r1, [r1, #4]
 8003d7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d7e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d80:	4945      	ldr	r1, [pc, #276]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003d82:	6849      	ldr	r1, [r1, #4]
 8003d84:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	d024      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8c:	4942      	ldr	r1, [pc, #264]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003d8e:	6849      	ldr	r1, [r1, #4]
 8003d90:	0989      	lsrs	r1, r1, #6
 8003d92:	4608      	mov	r0, r1
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d9c:	f04f 0500 	mov.w	r5, #0
 8003da0:	ea00 0204 	and.w	r2, r0, r4
 8003da4:	ea01 0305 	and.w	r3, r1, r5
 8003da8:	493d      	ldr	r1, [pc, #244]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003daa:	fb01 f003 	mul.w	r0, r1, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	fb01 f102 	mul.w	r1, r1, r2
 8003db4:	1844      	adds	r4, r0, r1
 8003db6:	493a      	ldr	r1, [pc, #232]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003db8:	fba2 0101 	umull	r0, r1, r2, r1
 8003dbc:	1863      	adds	r3, r4, r1
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	f7fc fef0 	bl	8000bac <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e04a      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	ea02 0400 	and.w	r4, r2, r0
 8003dee:	ea03 0501 	and.w	r5, r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	014b      	lsls	r3, r1, #5
 8003e00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e04:	0142      	lsls	r2, r0, #5
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	1b00      	subs	r0, r0, r4
 8003e0c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	018b      	lsls	r3, r1, #6
 8003e1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e1e:	0182      	lsls	r2, r0, #6
 8003e20:	1a12      	subs	r2, r2, r0
 8003e22:	eb63 0301 	sbc.w	r3, r3, r1
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	00d9      	lsls	r1, r3, #3
 8003e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e34:	00d0      	lsls	r0, r2, #3
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	1912      	adds	r2, r2, r4
 8003e3c:	eb45 0303 	adc.w	r3, r5, r3
 8003e40:	f04f 0000 	mov.w	r0, #0
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	0299      	lsls	r1, r3, #10
 8003e4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e4e:	0290      	lsls	r0, r2, #10
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	f7fc fea4 	bl	8000bac <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0f1b      	lsrs	r3, r3, #28
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
      break;
 8003e82:	e002      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003e86:	613b      	str	r3, [r7, #16]
      break;
 8003e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8a:	693b      	ldr	r3, [r7, #16]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	017d7840 	.word	0x017d7840

08003ea4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e28d      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8083 	beq.w	8003fca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ec4:	4b94      	ldr	r3, [pc, #592]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d019      	beq.n	8003f04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ed0:	4b91      	ldr	r3, [pc, #580]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d106      	bne.n	8003eea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003edc:	4b8e      	ldr	r3, [pc, #568]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee8:	d00c      	beq.n	8003f04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d112      	bne.n	8003f1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef6:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	4b84      	ldr	r3, [pc, #528]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05b      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x124>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d157      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e25a      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x90>
 8003f26:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7b      	ldr	r2, [pc, #492]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xcc>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0xb4>
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b73      	ldr	r3, [pc, #460]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a72      	ldr	r2, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xcc>
 8003f58:	4b6f      	ldr	r3, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6b      	ldr	r2, [pc, #428]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fc48 	bl	800180c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7fd fc44 	bl	800180c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	; 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e21f      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b61      	ldr	r3, [pc, #388]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xdc>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fc34 	bl	800180c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fd fc30 	bl	800180c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e20b      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	4b57      	ldr	r3, [pc, #348]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x104>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06f      	beq.n	80040b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fd6:	4b50      	ldr	r3, [pc, #320]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d017      	beq.n	8004012 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fe2:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d105      	bne.n	8003ffa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffa:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x186>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1d3      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b3b      	ldr	r3, [pc, #236]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4937      	ldr	r1, [pc, #220]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e03a      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCC_OscConfig+0x278>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fd fbdd 	bl	800180c <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004056:	f7fd fbd9 	bl	800180c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1b4      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4925      	ldr	r1, [pc, #148]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x278>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fd fbbc 	bl	800180c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004098:	f7fd fbb8 	bl	800180c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e193      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fb9c 	bl	800180c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fd fb98 	bl	800180c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e173      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x274>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x234>
 80040f6:	e01b      	b.n	8004130 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd fb85 	bl	800180c <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	e00e      	b.n	8004124 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004106:	f7fd fb81 	bl	800180c <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d907      	bls.n	8004124 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e15c      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b8a      	ldr	r3, [pc, #552]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ea      	bne.n	8004106 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8097 	beq.w	800426c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b83      	ldr	r3, [pc, #524]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	; 0x40
 800415e:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b79      	ldr	r3, [pc, #484]	; (8004354 <HAL_RCC_OscConfig+0x4b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b76      	ldr	r3, [pc, #472]	; (8004354 <HAL_RCC_OscConfig+0x4b0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a75      	ldr	r2, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4b0>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fd fb41 	bl	800180c <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fd fb3d 	bl	800180c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e118      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <HAL_RCC_OscConfig+0x4b0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x31e>
 80041b4:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	4a65      	ldr	r2, [pc, #404]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6713      	str	r3, [r2, #112]	; 0x70
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x358>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x340>
 80041ca:	4b61      	ldr	r3, [pc, #388]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a60      	ldr	r2, [pc, #384]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
 80041d6:	4b5e      	ldr	r3, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0x358>
 80041e4:	4b5a      	ldr	r3, [pc, #360]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a59      	ldr	r2, [pc, #356]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fd fb02 	bl	800180c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7fd fafe 	bl	800180c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	; 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0d7      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ee      	beq.n	800420c <HAL_RCC_OscConfig+0x368>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fd faec 	bl	800180c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd fae8 	bl	800180c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0c1      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	4b40      	ldr	r3, [pc, #256]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a3a      	ldr	r2, [pc, #232]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80ad 	beq.w	80043d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004276:	4b36      	ldr	r3, [pc, #216]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d060      	beq.n	8004344 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d145      	bne.n	8004316 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b33      	ldr	r3, [pc, #204]	; (8004358 <HAL_RCC_OscConfig+0x4b4>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fd fabc 	bl	800180c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd fab8 	bl	800180c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e093      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	071b      	lsls	r3, r3, #28
 80042e2:	491b      	ldr	r1, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x4b4>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd fa8d 	bl	800180c <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fa89 	bl	800180c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e064      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x452>
 8004314:	e05c      	b.n	80043d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_OscConfig+0x4b4>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fd fa76 	bl	800180c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fd fa72 	bl	800180c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e04d      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x480>
 8004342:	e045      	b.n	80043d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e040      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
 8004358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435c:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <HAL_RCC_OscConfig+0x538>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d030      	beq.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d129      	bne.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d122      	bne.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d119      	bne.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d10f      	bne.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e041      	b.n	8004476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc fffa 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fa14 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e046      	b.n	8004526 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <HAL_TIM_Base_Start+0xb4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d022      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d01d      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <HAL_TIM_Base_Start+0xb8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_TIM_Base_Start+0xbc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <HAL_TIM_Base_Start+0xc0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIM_Base_Start+0xc4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_TIM_Base_Start+0xc8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIM_Base_Start+0x70>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_TIM_Base_Start+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d111      	bne.n	8004514 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b06      	cmp	r3, #6
 8004500:	d010      	beq.n	8004524 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e007      	b.n	8004524 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40010000 	.word	0x40010000
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800
 8004540:	40000c00 	.word	0x40000c00
 8004544:	40010400 	.word	0x40010400
 8004548:	40014000 	.word	0x40014000
 800454c:	40001800 	.word	0x40001800

08004550 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e041      	b.n	80045e6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f839 	bl	80045ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f000 f95c 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_TIM_OC_ConfigChannel+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e048      	b.n	80046b4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d839      	bhi.n	80046a4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800466d 	.word	0x0800466d
 800463c:	080046a5 	.word	0x080046a5
 8004640:	080046a5 	.word	0x080046a5
 8004644:	080046a5 	.word	0x080046a5
 8004648:	0800467b 	.word	0x0800467b
 800464c:	080046a5 	.word	0x080046a5
 8004650:	080046a5 	.word	0x080046a5
 8004654:	080046a5 	.word	0x080046a5
 8004658:	08004689 	.word	0x08004689
 800465c:	080046a5 	.word	0x080046a5
 8004660:	080046a5 	.word	0x080046a5
 8004664:	080046a5 	.word	0x080046a5
 8004668:	08004697 	.word	0x08004697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f98a 	bl	800498c <TIM_OC1_SetConfig>
      break;
 8004678:	e017      	b.n	80046aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 f9f3 	bl	8004a6c <TIM_OC2_SetConfig>
      break;
 8004686:	e010      	b.n	80046aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fa62 	bl	8004b58 <TIM_OC3_SetConfig>
      break;
 8004694:	e009      	b.n	80046aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 facf 	bl	8004c40 <TIM_OC4_SetConfig>
      break;
 80046a2:	e002      	b.n	80046aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	75fb      	strb	r3, [r7, #23]
      break;
 80046a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIM_ConfigClockSource+0x1c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0b4      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x186>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004710:	d03e      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0xd4>
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	f200 8087 	bhi.w	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	f000 8086 	beq.w	800482e <HAL_TIM_ConfigClockSource+0x172>
 8004722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004726:	d87f      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b70      	cmp	r3, #112	; 0x70
 800472a:	d01a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0xa6>
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d87b      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b60      	cmp	r3, #96	; 0x60
 8004732:	d050      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d877      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b50      	cmp	r3, #80	; 0x50
 800473a:	d03c      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0xfa>
 800473c:	2b50      	cmp	r3, #80	; 0x50
 800473e:	d873      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d058      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d86f      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d064      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b30      	cmp	r3, #48	; 0x30
 800474e:	d86b      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d060      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	2b20      	cmp	r3, #32
 8004756:	d867      	bhi.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d05c      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 800475c:	2b10      	cmp	r3, #16
 800475e:	d05a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x15a>
 8004760:	e062      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f000 fb35 	bl	8004de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	609a      	str	r2, [r3, #8]
      break;
 800478e:	e04f      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f000 fb1e 	bl	8004de0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b2:	609a      	str	r2, [r3, #8]
      break;
 80047b4:	e03c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6859      	ldr	r1, [r3, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f000 fa92 	bl	8004cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2150      	movs	r1, #80	; 0x50
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 faeb 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 80047d4:	e02c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fab1 	bl	8004d4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2160      	movs	r1, #96	; 0x60
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fadb 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 80047f4:	e01c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fa72 	bl	8004cec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2140      	movs	r1, #64	; 0x40
 800480e:	4618      	mov	r0, r3
 8004810:	f000 facb 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004814:	e00c      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4619      	mov	r1, r3
 8004820:	4610      	mov	r0, r2
 8004822:	f000 fac2 	bl	8004daa <TIM_ITRx_SetConfig>
      break;
 8004826:	e003      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      break;
 800482c:	e000      	b.n	8004830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800482e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a40      	ldr	r2, [pc, #256]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <TIM_Base_SetConfig+0x118>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3b      	ldr	r2, [pc, #236]	; (800496c <TIM_Base_SetConfig+0x120>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <TIM_Base_SetConfig+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d027      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x118>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d023      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x120>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x124>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_Base_SetConfig+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <TIM_Base_SetConfig+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_Base_SetConfig+0x130>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	; (8004980 <TIM_Base_SetConfig+0x134>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_Base_SetConfig+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	; (8004988 <TIM_Base_SetConfig+0x13c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800
 8004980:	40001800 	.word	0x40001800
 8004984:	40001c00 	.word	0x40001c00
 8004988:	40002000 	.word	0x40002000

0800498c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_OC1_SetConfig+0xd8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC1_SetConfig+0x64>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d10c      	bne.n	8004a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f023 0308 	bic.w	r3, r3, #8
 80049f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0304 	bic.w	r3, r3, #4
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <TIM_OC1_SetConfig+0xd8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC1_SetConfig+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <TIM_OC1_SetConfig+0xdc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d111      	bne.n	8004a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40010400 	.word	0x40010400

08004a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0210 	bic.w	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_OC2_SetConfig+0x68>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <TIM_OC2_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC2_SetConfig+0x94>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <TIM_OC2_SetConfig+0xe8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d113      	bne.n	8004b28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40010400 	.word	0x40010400

08004b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0303 	bic.w	r3, r3, #3
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <TIM_OC3_SetConfig+0xe0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_OC3_SetConfig+0x66>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a20      	ldr	r2, [pc, #128]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10d      	bne.n	8004bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <TIM_OC3_SetConfig+0xe0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d003      	beq.n	8004bea <TIM_OC3_SetConfig+0x92>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <TIM_OC3_SetConfig+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d113      	bne.n	8004c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	621a      	str	r2, [r3, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40010400 	.word	0x40010400

08004c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	031b      	lsls	r3, r3, #12
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <TIM_OC4_SetConfig+0xa4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x68>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <TIM_OC4_SetConfig+0xa8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f023 030a 	bic.w	r3, r3, #10
 8004d28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0210 	bic.w	r2, r3, #16
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	031b      	lsls	r3, r3, #12
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f043 0307 	orr.w	r3, r3, #7
 8004dcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e05a      	b.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a21      	ldr	r2, [pc, #132]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d01d      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10c      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40001800 	.word	0x40001800

08004f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e03d      	b.n	8004fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e03f      	b.n	800504e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fa2e 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f929 	bl	8005258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b08a      	sub	sp, #40	; 0x28
 800505a:	af02      	add	r7, sp, #8
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b20      	cmp	r3, #32
 8005074:	d17c      	bne.n	8005170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_UART_Transmit+0x2c>
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e075      	b.n	8005172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_UART_Transmit+0x3e>
 8005090:	2302      	movs	r3, #2
 8005092:	e06e      	b.n	8005172 <HAL_UART_Transmit+0x11c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2221      	movs	r2, #33	; 0x21
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fc fbaf 	bl	800180c <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d108      	bne.n	80050d8 <HAL_UART_Transmit+0x82>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050e8:	e02a      	b.n	8005140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f840 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e036      	b.n	8005172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e007      	b.n	8005132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1cf      	bne.n	80050ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2140      	movs	r1, #64	; 0x40
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f810 	bl	800517a <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b090      	sub	sp, #64	; 0x40
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518a:	e050      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d04c      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <UART_WaitOnFlagUntilTimeout+0x30>
 800519a:	f7fc fb37 	bl	800180c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d241      	bcs.n	800522e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ca:	637a      	str	r2, [r7, #52]	; 0x34
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e5      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3314      	adds	r3, #20
 80051e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	613b      	str	r3, [r7, #16]
   return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3314      	adds	r3, #20
 80051fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fe:	623a      	str	r2, [r7, #32]
 8005200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	69f9      	ldr	r1, [r7, #28]
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	61bb      	str	r3, [r7, #24]
   return(result);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d09f      	beq.n	800518c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3740      	adds	r7, #64	; 0x40
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	b09f      	sub	sp, #124	; 0x7c
 800525e:	af00      	add	r7, sp, #0
 8005260:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	68d9      	ldr	r1, [r3, #12]
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	ea40 0301 	orr.w	r3, r0, r1
 8005278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	431a      	orrs	r2, r3
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	431a      	orrs	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800529c:	f021 010c 	bic.w	r1, r1, #12
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a6:	430b      	orrs	r3, r1
 80052a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	ea40 0301 	orr.w	r3, r0, r1
 80052c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4bc5      	ldr	r3, [pc, #788]	; (80055dc <UART_SetConfig+0x384>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d004      	beq.n	80052d6 <UART_SetConfig+0x7e>
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4bc3      	ldr	r3, [pc, #780]	; (80055e0 <UART_SetConfig+0x388>)
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d103      	bne.n	80052de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d6:	f7fe fc75 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 80052da:	6778      	str	r0, [r7, #116]	; 0x74
 80052dc:	e002      	b.n	80052e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7fe fc5d 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 80052e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ec:	f040 80b6 	bne.w	800545c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f2:	461c      	mov	r4, r3
 80052f4:	f04f 0500 	mov.w	r5, #0
 80052f8:	4622      	mov	r2, r4
 80052fa:	462b      	mov	r3, r5
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005300:	415b      	adcs	r3, r3
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
 8005304:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005308:	1912      	adds	r2, r2, r4
 800530a:	eb45 0303 	adc.w	r3, r5, r3
 800530e:	f04f 0000 	mov.w	r0, #0
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	00d9      	lsls	r1, r3, #3
 8005318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800531c:	00d0      	lsls	r0, r2, #3
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	1911      	adds	r1, r2, r4
 8005324:	6639      	str	r1, [r7, #96]	; 0x60
 8005326:	416b      	adcs	r3, r5
 8005328:	667b      	str	r3, [r7, #100]	; 0x64
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	461a      	mov	r2, r3
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	1891      	adds	r1, r2, r2
 8005336:	63b9      	str	r1, [r7, #56]	; 0x38
 8005338:	415b      	adcs	r3, r3
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005340:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005344:	f7fb fc32 	bl	8000bac <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <UART_SetConfig+0x38c>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011e      	lsls	r6, r3, #4
 8005356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005358:	461c      	mov	r4, r3
 800535a:	f04f 0500 	mov.w	r5, #0
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	1891      	adds	r1, r2, r2
 8005364:	6339      	str	r1, [r7, #48]	; 0x30
 8005366:	415b      	adcs	r3, r3
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
 800536a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800536e:	1912      	adds	r2, r2, r4
 8005370:	eb45 0303 	adc.w	r3, r5, r3
 8005374:	f04f 0000 	mov.w	r0, #0
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	00d9      	lsls	r1, r3, #3
 800537e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005382:	00d0      	lsls	r0, r2, #3
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	1911      	adds	r1, r2, r4
 800538a:	65b9      	str	r1, [r7, #88]	; 0x58
 800538c:	416b      	adcs	r3, r5
 800538e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	461a      	mov	r2, r3
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	1891      	adds	r1, r2, r2
 800539c:	62b9      	str	r1, [r7, #40]	; 0x28
 800539e:	415b      	adcs	r3, r3
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053aa:	f7fb fbff 	bl	8000bac <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4b8c      	ldr	r3, [pc, #560]	; (80055e4 <UART_SetConfig+0x38c>)
 80053b4:	fba3 1302 	umull	r1, r3, r3, r2
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	2164      	movs	r1, #100	; 0x64
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	3332      	adds	r3, #50	; 0x32
 80053c6:	4a87      	ldr	r2, [pc, #540]	; (80055e4 <UART_SetConfig+0x38c>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053d4:	441e      	add	r6, r3
 80053d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d8:	4618      	mov	r0, r3
 80053da:	f04f 0100 	mov.w	r1, #0
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	1894      	adds	r4, r2, r2
 80053e4:	623c      	str	r4, [r7, #32]
 80053e6:	415b      	adcs	r3, r3
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ee:	1812      	adds	r2, r2, r0
 80053f0:	eb41 0303 	adc.w	r3, r1, r3
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	f04f 0500 	mov.w	r5, #0
 80053fc:	00dd      	lsls	r5, r3, #3
 80053fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005402:	00d4      	lsls	r4, r2, #3
 8005404:	4622      	mov	r2, r4
 8005406:	462b      	mov	r3, r5
 8005408:	1814      	adds	r4, r2, r0
 800540a:	653c      	str	r4, [r7, #80]	; 0x50
 800540c:	414b      	adcs	r3, r1
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	461a      	mov	r2, r3
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	1891      	adds	r1, r2, r2
 800541c:	61b9      	str	r1, [r7, #24]
 800541e:	415b      	adcs	r3, r3
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005426:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800542a:	f7fb fbbf 	bl	8000bac <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <UART_SetConfig+0x38c>)
 8005434:	fba3 1302 	umull	r1, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2164      	movs	r1, #100	; 0x64
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a67      	ldr	r2, [pc, #412]	; (80055e4 <UART_SetConfig+0x38c>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 0207 	and.w	r2, r3, #7
 8005452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4432      	add	r2, r6
 8005458:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800545a:	e0b9      	b.n	80055d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800545c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545e:	461c      	mov	r4, r3
 8005460:	f04f 0500 	mov.w	r5, #0
 8005464:	4622      	mov	r2, r4
 8005466:	462b      	mov	r3, r5
 8005468:	1891      	adds	r1, r2, r2
 800546a:	6139      	str	r1, [r7, #16]
 800546c:	415b      	adcs	r3, r3
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005474:	1912      	adds	r2, r2, r4
 8005476:	eb45 0303 	adc.w	r3, r5, r3
 800547a:	f04f 0000 	mov.w	r0, #0
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	00d9      	lsls	r1, r3, #3
 8005484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005488:	00d0      	lsls	r0, r2, #3
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	eb12 0804 	adds.w	r8, r2, r4
 8005492:	eb43 0905 	adc.w	r9, r3, r5
 8005496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	008b      	lsls	r3, r1, #2
 80054aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ae:	0082      	lsls	r2, r0, #2
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fb7a 	bl	8000bac <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <UART_SetConfig+0x38c>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	011e      	lsls	r6, r3, #4
 80054c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c8:	4618      	mov	r0, r3
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	1894      	adds	r4, r2, r2
 80054d4:	60bc      	str	r4, [r7, #8]
 80054d6:	415b      	adcs	r3, r3
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054de:	1812      	adds	r2, r2, r0
 80054e0:	eb41 0303 	adc.w	r3, r1, r3
 80054e4:	f04f 0400 	mov.w	r4, #0
 80054e8:	f04f 0500 	mov.w	r5, #0
 80054ec:	00dd      	lsls	r5, r3, #3
 80054ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054f2:	00d4      	lsls	r4, r2, #3
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	1814      	adds	r4, r2, r0
 80054fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80054fc:	414b      	adcs	r3, r1
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	f04f 0100 	mov.w	r1, #0
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	008b      	lsls	r3, r1, #2
 8005514:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005518:	0082      	lsls	r2, r0, #2
 800551a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800551e:	f7fb fb45 	bl	8000bac <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <UART_SetConfig+0x38c>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	; 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	3332      	adds	r3, #50	; 0x32
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <UART_SetConfig+0x38c>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005546:	441e      	add	r6, r3
 8005548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554a:	4618      	mov	r0, r3
 800554c:	f04f 0100 	mov.w	r1, #0
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	1894      	adds	r4, r2, r2
 8005556:	603c      	str	r4, [r7, #0]
 8005558:	415b      	adcs	r3, r3
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005560:	1812      	adds	r2, r2, r0
 8005562:	eb41 0303 	adc.w	r3, r1, r3
 8005566:	f04f 0400 	mov.w	r4, #0
 800556a:	f04f 0500 	mov.w	r5, #0
 800556e:	00dd      	lsls	r5, r3, #3
 8005570:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005574:	00d4      	lsls	r4, r2, #3
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	eb12 0a00 	adds.w	sl, r2, r0
 800557e:	eb43 0b01 	adc.w	fp, r3, r1
 8005582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f04f 0100 	mov.w	r1, #0
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	008b      	lsls	r3, r1, #2
 8005596:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800559a:	0082      	lsls	r2, r0, #2
 800559c:	4650      	mov	r0, sl
 800559e:	4659      	mov	r1, fp
 80055a0:	f7fb fb04 	bl	8000bac <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <UART_SetConfig+0x38c>)
 80055aa:	fba3 1302 	umull	r1, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2164      	movs	r1, #100	; 0x64
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	3332      	adds	r3, #50	; 0x32
 80055bc:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <UART_SetConfig+0x38c>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4432      	add	r2, r6
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	377c      	adds	r7, #124	; 0x7c
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	51eb851f 	.word	0x51eb851f

080055e8 <gcvt>:
 80055e8:	b530      	push	{r4, r5, lr}
 80055ea:	2200      	movs	r2, #0
 80055ec:	b085      	sub	sp, #20
 80055ee:	460c      	mov	r4, r1
 80055f0:	4605      	mov	r5, r0
 80055f2:	2300      	movs	r3, #0
 80055f4:	ec51 0b10 	vmov	r0, r1, d0
 80055f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80055fc:	f7fb fa86 	bl	8000b0c <__aeabi_dcmplt>
 8005600:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005604:	4622      	mov	r2, r4
 8005606:	b118      	cbz	r0, 8005610 <gcvt+0x28>
 8005608:	232d      	movs	r3, #45	; 0x2d
 800560a:	f802 3b01 	strb.w	r3, [r2], #1
 800560e:	3d01      	subs	r5, #1
 8005610:	2300      	movs	r3, #0
 8005612:	4806      	ldr	r0, [pc, #24]	; (800562c <gcvt+0x44>)
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	4629      	mov	r1, r5
 8005618:	2367      	movs	r3, #103	; 0x67
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	f000 f8b4 	bl	8005788 <_gcvt>
 8005620:	2800      	cmp	r0, #0
 8005622:	bf14      	ite	ne
 8005624:	4620      	movne	r0, r4
 8005626:	2000      	moveq	r0, #0
 8005628:	b005      	add	sp, #20
 800562a:	bd30      	pop	{r4, r5, pc}
 800562c:	20000018 	.word	0x20000018

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000018 	.word	0x20000018

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	; (8005674 <__libc_init_array+0x38>)
 8005640:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	2600      	movs	r6, #0
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	; (800567c <__libc_init_array+0x40>)
 800564e:	4c0c      	ldr	r4, [pc, #48]	; (8005680 <__libc_init_array+0x44>)
 8005650:	f002 fb56 	bl	8007d00 <_init>
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	2600      	movs	r6, #0
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	08008004 	.word	0x08008004
 8005678:	08008004 	.word	0x08008004
 800567c:	08008004 	.word	0x08008004
 8005680:	08008008 	.word	0x08008008

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <print_e>:
 8005694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005696:	b087      	sub	sp, #28
 8005698:	ec43 2b10 	vmov	d0, r2, r3
 800569c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800569e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80056a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056a4:	ab04      	add	r3, sp, #16
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	1c62      	adds	r2, r4, #1
 80056ae:	ab05      	add	r3, sp, #20
 80056b0:	460f      	mov	r7, r1
 80056b2:	2102      	movs	r1, #2
 80056b4:	f000 fdf0 	bl	8006298 <_dtoa_r>
 80056b8:	9a05      	ldr	r2, [sp, #20]
 80056ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80056be:	429a      	cmp	r2, r3
 80056c0:	d105      	bne.n	80056ce <print_e+0x3a>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4638      	mov	r0, r7
 80056c6:	f000 fd35 	bl	8006134 <strcpy>
 80056ca:	b007      	add	sp, #28
 80056cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ce:	463b      	mov	r3, r7
 80056d0:	7801      	ldrb	r1, [r0, #0]
 80056d2:	f803 1b01 	strb.w	r1, [r3], #1
 80056d6:	2c00      	cmp	r4, #0
 80056d8:	bfc8      	it	gt
 80056da:	2501      	movgt	r5, #1
 80056dc:	212e      	movs	r1, #46	; 0x2e
 80056de:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80056e2:	b10f      	cbz	r7, 80056e8 <print_e+0x54>
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	dc37      	bgt.n	8005758 <print_e+0xc4>
 80056e8:	2e67      	cmp	r6, #103	; 0x67
 80056ea:	d046      	beq.n	800577a <print_e+0xe6>
 80056ec:	2e47      	cmp	r6, #71	; 0x47
 80056ee:	d046      	beq.n	800577e <print_e+0xea>
 80056f0:	212e      	movs	r1, #46	; 0x2e
 80056f2:	2030      	movs	r0, #48	; 0x30
 80056f4:	2c00      	cmp	r4, #0
 80056f6:	dc38      	bgt.n	800576a <print_e+0xd6>
 80056f8:	1e51      	subs	r1, r2, #1
 80056fa:	2900      	cmp	r1, #0
 80056fc:	bfb8      	it	lt
 80056fe:	f1c2 0201 	rsblt	r2, r2, #1
 8005702:	4618      	mov	r0, r3
 8005704:	9105      	str	r1, [sp, #20]
 8005706:	bfbc      	itt	lt
 8005708:	212d      	movlt	r1, #45	; 0x2d
 800570a:	9205      	strlt	r2, [sp, #20]
 800570c:	f800 6b02 	strb.w	r6, [r0], #2
 8005710:	bfb8      	it	lt
 8005712:	7059      	strblt	r1, [r3, #1]
 8005714:	9905      	ldr	r1, [sp, #20]
 8005716:	bfa4      	itt	ge
 8005718:	222b      	movge	r2, #43	; 0x2b
 800571a:	705a      	strbge	r2, [r3, #1]
 800571c:	2963      	cmp	r1, #99	; 0x63
 800571e:	dd0b      	ble.n	8005738 <print_e+0xa4>
 8005720:	2264      	movs	r2, #100	; 0x64
 8005722:	fb91 f2f2 	sdiv	r2, r1, r2
 8005726:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800572a:	1cd8      	adds	r0, r3, #3
 800572c:	709c      	strb	r4, [r3, #2]
 800572e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005732:	fb03 1202 	mla	r2, r3, r2, r1
 8005736:	9205      	str	r2, [sp, #20]
 8005738:	9a05      	ldr	r2, [sp, #20]
 800573a:	230a      	movs	r3, #10
 800573c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005740:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005744:	7001      	strb	r1, [r0, #0]
 8005746:	f06f 0109 	mvn.w	r1, #9
 800574a:	fb01 2303 	mla	r3, r1, r3, r2
 800574e:	3330      	adds	r3, #48	; 0x30
 8005750:	7043      	strb	r3, [r0, #1]
 8005752:	2300      	movs	r3, #0
 8005754:	7083      	strb	r3, [r0, #2]
 8005756:	e7b8      	b.n	80056ca <print_e+0x36>
 8005758:	b10d      	cbz	r5, 800575e <print_e+0xca>
 800575a:	f803 1b01 	strb.w	r1, [r3], #1
 800575e:	7805      	ldrb	r5, [r0, #0]
 8005760:	f803 5b01 	strb.w	r5, [r3], #1
 8005764:	3c01      	subs	r4, #1
 8005766:	2500      	movs	r5, #0
 8005768:	e7b9      	b.n	80056de <print_e+0x4a>
 800576a:	b10d      	cbz	r5, 8005770 <print_e+0xdc>
 800576c:	f803 1b01 	strb.w	r1, [r3], #1
 8005770:	f803 0b01 	strb.w	r0, [r3], #1
 8005774:	3c01      	subs	r4, #1
 8005776:	2500      	movs	r5, #0
 8005778:	e7bc      	b.n	80056f4 <print_e+0x60>
 800577a:	2665      	movs	r6, #101	; 0x65
 800577c:	e7bc      	b.n	80056f8 <print_e+0x64>
 800577e:	2645      	movs	r6, #69	; 0x45
 8005780:	e7ba      	b.n	80056f8 <print_e+0x64>
 8005782:	0000      	movs	r0, r0
 8005784:	0000      	movs	r0, r0
	...

08005788 <_gcvt>:
 8005788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	ec55 4b10 	vmov	r4, r5, d0
 8005790:	b088      	sub	sp, #32
 8005792:	4681      	mov	r9, r0
 8005794:	4688      	mov	r8, r1
 8005796:	4616      	mov	r6, r2
 8005798:	469a      	mov	sl, r3
 800579a:	ee10 0a10 	vmov	r0, s0
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4629      	mov	r1, r5
 80057a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80057a6:	f7fb f9b1 	bl	8000b0c <__aeabi_dcmplt>
 80057aa:	b110      	cbz	r0, 80057b2 <_gcvt+0x2a>
 80057ac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057b0:	461d      	mov	r5, r3
 80057b2:	2200      	movs	r2, #0
 80057b4:	2300      	movs	r3, #0
 80057b6:	4620      	mov	r0, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	f7fb f99d 	bl	8000af8 <__aeabi_dcmpeq>
 80057be:	b138      	cbz	r0, 80057d0 <_gcvt+0x48>
 80057c0:	2330      	movs	r3, #48	; 0x30
 80057c2:	7033      	strb	r3, [r6, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	7073      	strb	r3, [r6, #1]
 80057c8:	4630      	mov	r0, r6
 80057ca:	b008      	add	sp, #32
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	a34b      	add	r3, pc, #300	; (adr r3, 8005900 <_gcvt+0x178>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	4620      	mov	r0, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	f7fb f9a1 	bl	8000b20 <__aeabi_dcmple>
 80057de:	b158      	cbz	r0, 80057f8 <_gcvt+0x70>
 80057e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80057e4:	9100      	str	r1, [sp, #0]
 80057e6:	e9cd a701 	strd	sl, r7, [sp, #4]
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	4631      	mov	r1, r6
 80057f0:	4648      	mov	r0, r9
 80057f2:	f7ff ff4f 	bl	8005694 <print_e>
 80057f6:	e7e7      	b.n	80057c8 <_gcvt+0x40>
 80057f8:	4640      	mov	r0, r8
 80057fa:	f000 fc03 	bl	8006004 <_mprec_log10>
 80057fe:	4622      	mov	r2, r4
 8005800:	ec51 0b10 	vmov	r0, r1, d0
 8005804:	462b      	mov	r3, r5
 8005806:	f7fb f98b 	bl	8000b20 <__aeabi_dcmple>
 800580a:	2800      	cmp	r0, #0
 800580c:	d1e8      	bne.n	80057e0 <_gcvt+0x58>
 800580e:	ab07      	add	r3, sp, #28
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	ab06      	add	r3, sp, #24
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4642      	mov	r2, r8
 8005818:	ab05      	add	r3, sp, #20
 800581a:	ec45 4b10 	vmov	d0, r4, r5
 800581e:	2102      	movs	r1, #2
 8005820:	4648      	mov	r0, r9
 8005822:	f000 fd39 	bl	8006298 <_dtoa_r>
 8005826:	9a05      	ldr	r2, [sp, #20]
 8005828:	f242 730f 	movw	r3, #9999	; 0x270f
 800582c:	429a      	cmp	r2, r3
 800582e:	d00e      	beq.n	800584e <_gcvt+0xc6>
 8005830:	4633      	mov	r3, r6
 8005832:	44b0      	add	r8, r6
 8005834:	4604      	mov	r4, r0
 8005836:	f810 5b01 	ldrb.w	r5, [r0], #1
 800583a:	9905      	ldr	r1, [sp, #20]
 800583c:	eba8 0203 	sub.w	r2, r8, r3
 8005840:	b10d      	cbz	r5, 8005846 <_gcvt+0xbe>
 8005842:	2900      	cmp	r1, #0
 8005844:	dc08      	bgt.n	8005858 <_gcvt+0xd0>
 8005846:	2000      	movs	r0, #0
 8005848:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800584c:	e00d      	b.n	800586a <_gcvt+0xe2>
 800584e:	4601      	mov	r1, r0
 8005850:	4630      	mov	r0, r6
 8005852:	f000 fc6f 	bl	8006134 <strcpy>
 8005856:	e7b7      	b.n	80057c8 <_gcvt+0x40>
 8005858:	3901      	subs	r1, #1
 800585a:	f803 5b01 	strb.w	r5, [r3], #1
 800585e:	9105      	str	r1, [sp, #20]
 8005860:	e7e8      	b.n	8005834 <_gcvt+0xac>
 8005862:	f803 cb01 	strb.w	ip, [r3], #1
 8005866:	3a01      	subs	r2, #1
 8005868:	2001      	movs	r0, #1
 800586a:	2900      	cmp	r1, #0
 800586c:	460d      	mov	r5, r1
 800586e:	dc2a      	bgt.n	80058c6 <_gcvt+0x13e>
 8005870:	b100      	cbz	r0, 8005874 <_gcvt+0xec>
 8005872:	9105      	str	r1, [sp, #20]
 8005874:	b90f      	cbnz	r7, 800587a <_gcvt+0xf2>
 8005876:	7821      	ldrb	r1, [r4, #0]
 8005878:	b311      	cbz	r1, 80058c0 <_gcvt+0x138>
 800587a:	42b3      	cmp	r3, r6
 800587c:	bf04      	itt	eq
 800587e:	2130      	moveq	r1, #48	; 0x30
 8005880:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005884:	212e      	movs	r1, #46	; 0x2e
 8005886:	7019      	strb	r1, [r3, #0]
 8005888:	9905      	ldr	r1, [sp, #20]
 800588a:	4618      	mov	r0, r3
 800588c:	2500      	movs	r5, #0
 800588e:	eba1 0c03 	sub.w	ip, r1, r3
 8005892:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005896:	eb1c 0f00 	cmn.w	ip, r0
 800589a:	d41c      	bmi.n	80058d6 <_gcvt+0x14e>
 800589c:	2900      	cmp	r1, #0
 800589e:	f1c1 0000 	rsb	r0, r1, #0
 80058a2:	bfc8      	it	gt
 80058a4:	2000      	movgt	r0, #0
 80058a6:	f100 0c01 	add.w	ip, r0, #1
 80058aa:	4463      	add	r3, ip
 80058ac:	4401      	add	r1, r0
 80058ae:	b105      	cbz	r5, 80058b2 <_gcvt+0x12a>
 80058b0:	9105      	str	r1, [sp, #20]
 80058b2:	1e61      	subs	r1, r4, #1
 80058b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058b8:	b108      	cbz	r0, 80058be <_gcvt+0x136>
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	dc0f      	bgt.n	80058de <_gcvt+0x156>
 80058be:	b9df      	cbnz	r7, 80058f8 <_gcvt+0x170>
 80058c0:	2200      	movs	r2, #0
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e780      	b.n	80057c8 <_gcvt+0x40>
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	f101 31ff 	add.w	r1, r1, #4294967295
 80058cc:	dcc9      	bgt.n	8005862 <_gcvt+0xda>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d0d0      	beq.n	8005874 <_gcvt+0xec>
 80058d2:	9505      	str	r5, [sp, #20]
 80058d4:	e7ce      	b.n	8005874 <_gcvt+0xec>
 80058d6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80058da:	2501      	movs	r5, #1
 80058dc:	e7db      	b.n	8005896 <_gcvt+0x10e>
 80058de:	f803 0b01 	strb.w	r0, [r3], #1
 80058e2:	3a01      	subs	r2, #1
 80058e4:	e7e6      	b.n	80058b4 <_gcvt+0x12c>
 80058e6:	f801 5b01 	strb.w	r5, [r1], #1
 80058ea:	1a60      	subs	r0, r4, r1
 80058ec:	2800      	cmp	r0, #0
 80058ee:	dcfa      	bgt.n	80058e6 <_gcvt+0x15e>
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	bfa8      	it	ge
 80058f4:	189b      	addge	r3, r3, r2
 80058f6:	e7e3      	b.n	80058c0 <_gcvt+0x138>
 80058f8:	4619      	mov	r1, r3
 80058fa:	189c      	adds	r4, r3, r2
 80058fc:	2530      	movs	r5, #48	; 0x30
 80058fe:	e7f4      	b.n	80058ea <_gcvt+0x162>
 8005900:	eb1c432d 	.word	0xeb1c432d
 8005904:	3f1a36e2 	.word	0x3f1a36e2

08005908 <_Balloc>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	b976      	cbnz	r6, 8005930 <_Balloc+0x28>
 8005912:	2010      	movs	r0, #16
 8005914:	f001 fabe 	bl	8006e94 <malloc>
 8005918:	4602      	mov	r2, r0
 800591a:	6260      	str	r0, [r4, #36]	; 0x24
 800591c:	b920      	cbnz	r0, 8005928 <_Balloc+0x20>
 800591e:	4b18      	ldr	r3, [pc, #96]	; (8005980 <_Balloc+0x78>)
 8005920:	4818      	ldr	r0, [pc, #96]	; (8005984 <_Balloc+0x7c>)
 8005922:	2166      	movs	r1, #102	; 0x66
 8005924:	f000 fc0e 	bl	8006144 <__assert_func>
 8005928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800592c:	6006      	str	r6, [r0, #0]
 800592e:	60c6      	str	r6, [r0, #12]
 8005930:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005932:	68f3      	ldr	r3, [r6, #12]
 8005934:	b183      	cbz	r3, 8005958 <_Balloc+0x50>
 8005936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800593e:	b9b8      	cbnz	r0, 8005970 <_Balloc+0x68>
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f605 	lsl.w	r6, r1, r5
 8005946:	1d72      	adds	r2, r6, #5
 8005948:	0092      	lsls	r2, r2, #2
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fb78 	bl	8006040 <_calloc_r>
 8005950:	b160      	cbz	r0, 800596c <_Balloc+0x64>
 8005952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005956:	e00e      	b.n	8005976 <_Balloc+0x6e>
 8005958:	2221      	movs	r2, #33	; 0x21
 800595a:	2104      	movs	r1, #4
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fb6f 	bl	8006040 <_calloc_r>
 8005962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005964:	60f0      	str	r0, [r6, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e4      	bne.n	8005936 <_Balloc+0x2e>
 800596c:	2000      	movs	r0, #0
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005976:	2300      	movs	r3, #0
 8005978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800597c:	e7f7      	b.n	800596e <_Balloc+0x66>
 800597e:	bf00      	nop
 8005980:	08007d34 	.word	0x08007d34
 8005984:	08007d4b 	.word	0x08007d4b

08005988 <_Bfree>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800598c:	4605      	mov	r5, r0
 800598e:	460c      	mov	r4, r1
 8005990:	b976      	cbnz	r6, 80059b0 <_Bfree+0x28>
 8005992:	2010      	movs	r0, #16
 8005994:	f001 fa7e 	bl	8006e94 <malloc>
 8005998:	4602      	mov	r2, r0
 800599a:	6268      	str	r0, [r5, #36]	; 0x24
 800599c:	b920      	cbnz	r0, 80059a8 <_Bfree+0x20>
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <_Bfree+0x3c>)
 80059a0:	4809      	ldr	r0, [pc, #36]	; (80059c8 <_Bfree+0x40>)
 80059a2:	218a      	movs	r1, #138	; 0x8a
 80059a4:	f000 fbce 	bl	8006144 <__assert_func>
 80059a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059ac:	6006      	str	r6, [r0, #0]
 80059ae:	60c6      	str	r6, [r0, #12]
 80059b0:	b13c      	cbz	r4, 80059c2 <_Bfree+0x3a>
 80059b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059b4:	6862      	ldr	r2, [r4, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059bc:	6021      	str	r1, [r4, #0]
 80059be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059c2:	bd70      	pop	{r4, r5, r6, pc}
 80059c4:	08007d34 	.word	0x08007d34
 80059c8:	08007d4b 	.word	0x08007d4b

080059cc <__multadd>:
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	690e      	ldr	r6, [r1, #16]
 80059d2:	4607      	mov	r7, r0
 80059d4:	4698      	mov	r8, r3
 80059d6:	460c      	mov	r4, r1
 80059d8:	f101 0014 	add.w	r0, r1, #20
 80059dc:	2300      	movs	r3, #0
 80059de:	6805      	ldr	r5, [r0, #0]
 80059e0:	b2a9      	uxth	r1, r5
 80059e2:	fb02 8101 	mla	r1, r2, r1, r8
 80059e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80059ea:	0c2d      	lsrs	r5, r5, #16
 80059ec:	fb02 c505 	mla	r5, r2, r5, ip
 80059f0:	b289      	uxth	r1, r1
 80059f2:	3301      	adds	r3, #1
 80059f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80059f8:	429e      	cmp	r6, r3
 80059fa:	f840 1b04 	str.w	r1, [r0], #4
 80059fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a02:	dcec      	bgt.n	80059de <__multadd+0x12>
 8005a04:	f1b8 0f00 	cmp.w	r8, #0
 8005a08:	d022      	beq.n	8005a50 <__multadd+0x84>
 8005a0a:	68a3      	ldr	r3, [r4, #8]
 8005a0c:	42b3      	cmp	r3, r6
 8005a0e:	dc19      	bgt.n	8005a44 <__multadd+0x78>
 8005a10:	6861      	ldr	r1, [r4, #4]
 8005a12:	4638      	mov	r0, r7
 8005a14:	3101      	adds	r1, #1
 8005a16:	f7ff ff77 	bl	8005908 <_Balloc>
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b928      	cbnz	r0, 8005a2a <__multadd+0x5e>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <__multadd+0x8c>)
 8005a22:	480e      	ldr	r0, [pc, #56]	; (8005a5c <__multadd+0x90>)
 8005a24:	21b5      	movs	r1, #181	; 0xb5
 8005a26:	f000 fb8d 	bl	8006144 <__assert_func>
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	3202      	adds	r2, #2
 8005a2e:	f104 010c 	add.w	r1, r4, #12
 8005a32:	0092      	lsls	r2, r2, #2
 8005a34:	300c      	adds	r0, #12
 8005a36:	f001 fa35 	bl	8006ea4 <memcpy>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f7ff ffa3 	bl	8005988 <_Bfree>
 8005a42:	462c      	mov	r4, r5
 8005a44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a48:	3601      	adds	r6, #1
 8005a4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a4e:	6126      	str	r6, [r4, #16]
 8005a50:	4620      	mov	r0, r4
 8005a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a56:	bf00      	nop
 8005a58:	08007dab 	.word	0x08007dab
 8005a5c:	08007d4b 	.word	0x08007d4b

08005a60 <__hi0bits>:
 8005a60:	0c03      	lsrs	r3, r0, #16
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	b9d3      	cbnz	r3, 8005a9c <__hi0bits+0x3c>
 8005a66:	0400      	lsls	r0, r0, #16
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a6e:	bf04      	itt	eq
 8005a70:	0200      	lsleq	r0, r0, #8
 8005a72:	3308      	addeq	r3, #8
 8005a74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a78:	bf04      	itt	eq
 8005a7a:	0100      	lsleq	r0, r0, #4
 8005a7c:	3304      	addeq	r3, #4
 8005a7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a82:	bf04      	itt	eq
 8005a84:	0080      	lsleq	r0, r0, #2
 8005a86:	3302      	addeq	r3, #2
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	db05      	blt.n	8005a98 <__hi0bits+0x38>
 8005a8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a90:	f103 0301 	add.w	r3, r3, #1
 8005a94:	bf08      	it	eq
 8005a96:	2320      	moveq	r3, #32
 8005a98:	4618      	mov	r0, r3
 8005a9a:	4770      	bx	lr
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e7e4      	b.n	8005a6a <__hi0bits+0xa>

08005aa0 <__lo0bits>:
 8005aa0:	6803      	ldr	r3, [r0, #0]
 8005aa2:	f013 0207 	ands.w	r2, r3, #7
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	d00b      	beq.n	8005ac2 <__lo0bits+0x22>
 8005aaa:	07da      	lsls	r2, r3, #31
 8005aac:	d424      	bmi.n	8005af8 <__lo0bits+0x58>
 8005aae:	0798      	lsls	r0, r3, #30
 8005ab0:	bf49      	itett	mi
 8005ab2:	085b      	lsrmi	r3, r3, #1
 8005ab4:	089b      	lsrpl	r3, r3, #2
 8005ab6:	2001      	movmi	r0, #1
 8005ab8:	600b      	strmi	r3, [r1, #0]
 8005aba:	bf5c      	itt	pl
 8005abc:	600b      	strpl	r3, [r1, #0]
 8005abe:	2002      	movpl	r0, #2
 8005ac0:	4770      	bx	lr
 8005ac2:	b298      	uxth	r0, r3
 8005ac4:	b9b0      	cbnz	r0, 8005af4 <__lo0bits+0x54>
 8005ac6:	0c1b      	lsrs	r3, r3, #16
 8005ac8:	2010      	movs	r0, #16
 8005aca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ace:	bf04      	itt	eq
 8005ad0:	0a1b      	lsreq	r3, r3, #8
 8005ad2:	3008      	addeq	r0, #8
 8005ad4:	071a      	lsls	r2, r3, #28
 8005ad6:	bf04      	itt	eq
 8005ad8:	091b      	lsreq	r3, r3, #4
 8005ada:	3004      	addeq	r0, #4
 8005adc:	079a      	lsls	r2, r3, #30
 8005ade:	bf04      	itt	eq
 8005ae0:	089b      	lsreq	r3, r3, #2
 8005ae2:	3002      	addeq	r0, #2
 8005ae4:	07da      	lsls	r2, r3, #31
 8005ae6:	d403      	bmi.n	8005af0 <__lo0bits+0x50>
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	f100 0001 	add.w	r0, r0, #1
 8005aee:	d005      	beq.n	8005afc <__lo0bits+0x5c>
 8005af0:	600b      	str	r3, [r1, #0]
 8005af2:	4770      	bx	lr
 8005af4:	4610      	mov	r0, r2
 8005af6:	e7e8      	b.n	8005aca <__lo0bits+0x2a>
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr
 8005afc:	2020      	movs	r0, #32
 8005afe:	4770      	bx	lr

08005b00 <__i2b>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	460c      	mov	r4, r1
 8005b04:	2101      	movs	r1, #1
 8005b06:	f7ff feff 	bl	8005908 <_Balloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	b928      	cbnz	r0, 8005b1a <__i2b+0x1a>
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <__i2b+0x24>)
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <__i2b+0x28>)
 8005b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b16:	f000 fb15 	bl	8006144 <__assert_func>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	6144      	str	r4, [r0, #20]
 8005b1e:	6103      	str	r3, [r0, #16]
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	bf00      	nop
 8005b24:	08007dab 	.word	0x08007dab
 8005b28:	08007d4b 	.word	0x08007d4b

08005b2c <__multiply>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	4614      	mov	r4, r2
 8005b32:	690a      	ldr	r2, [r1, #16]
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	bfb8      	it	lt
 8005b3a:	460b      	movlt	r3, r1
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	bfbc      	itt	lt
 8005b40:	4625      	movlt	r5, r4
 8005b42:	461c      	movlt	r4, r3
 8005b44:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b4c:	68ab      	ldr	r3, [r5, #8]
 8005b4e:	6869      	ldr	r1, [r5, #4]
 8005b50:	eb0a 0709 	add.w	r7, sl, r9
 8005b54:	42bb      	cmp	r3, r7
 8005b56:	b085      	sub	sp, #20
 8005b58:	bfb8      	it	lt
 8005b5a:	3101      	addlt	r1, #1
 8005b5c:	f7ff fed4 	bl	8005908 <_Balloc>
 8005b60:	b930      	cbnz	r0, 8005b70 <__multiply+0x44>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <__multiply+0x144>)
 8005b66:	4843      	ldr	r0, [pc, #268]	; (8005c74 <__multiply+0x148>)
 8005b68:	f240 115d 	movw	r1, #349	; 0x15d
 8005b6c:	f000 faea 	bl	8006144 <__assert_func>
 8005b70:	f100 0614 	add.w	r6, r0, #20
 8005b74:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005b78:	4633      	mov	r3, r6
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	d31e      	bcc.n	8005bbe <__multiply+0x92>
 8005b80:	f105 0c14 	add.w	ip, r5, #20
 8005b84:	f104 0314 	add.w	r3, r4, #20
 8005b88:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005b8c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005b90:	9202      	str	r2, [sp, #8]
 8005b92:	ebac 0205 	sub.w	r2, ip, r5
 8005b96:	3a15      	subs	r2, #21
 8005b98:	f022 0203 	bic.w	r2, r2, #3
 8005b9c:	3204      	adds	r2, #4
 8005b9e:	f105 0115 	add.w	r1, r5, #21
 8005ba2:	458c      	cmp	ip, r1
 8005ba4:	bf38      	it	cc
 8005ba6:	2204      	movcc	r2, #4
 8005ba8:	9201      	str	r2, [sp, #4]
 8005baa:	9a02      	ldr	r2, [sp, #8]
 8005bac:	9303      	str	r3, [sp, #12]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d808      	bhi.n	8005bc4 <__multiply+0x98>
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	dc55      	bgt.n	8005c62 <__multiply+0x136>
 8005bb6:	6107      	str	r7, [r0, #16]
 8005bb8:	b005      	add	sp, #20
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	f843 2b04 	str.w	r2, [r3], #4
 8005bc2:	e7db      	b.n	8005b7c <__multiply+0x50>
 8005bc4:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bc8:	f1ba 0f00 	cmp.w	sl, #0
 8005bcc:	d020      	beq.n	8005c10 <__multiply+0xe4>
 8005bce:	f105 0e14 	add.w	lr, r5, #20
 8005bd2:	46b1      	mov	r9, r6
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005bda:	f8d9 b000 	ldr.w	fp, [r9]
 8005bde:	b2a1      	uxth	r1, r4
 8005be0:	fa1f fb8b 	uxth.w	fp, fp
 8005be4:	fb0a b101 	mla	r1, sl, r1, fp
 8005be8:	4411      	add	r1, r2
 8005bea:	f8d9 2000 	ldr.w	r2, [r9]
 8005bee:	0c24      	lsrs	r4, r4, #16
 8005bf0:	0c12      	lsrs	r2, r2, #16
 8005bf2:	fb0a 2404 	mla	r4, sl, r4, r2
 8005bf6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005bfa:	b289      	uxth	r1, r1
 8005bfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c00:	45f4      	cmp	ip, lr
 8005c02:	f849 1b04 	str.w	r1, [r9], #4
 8005c06:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c0a:	d8e4      	bhi.n	8005bd6 <__multiply+0xaa>
 8005c0c:	9901      	ldr	r1, [sp, #4]
 8005c0e:	5072      	str	r2, [r6, r1]
 8005c10:	9a03      	ldr	r2, [sp, #12]
 8005c12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c16:	3304      	adds	r3, #4
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	d01f      	beq.n	8005c5e <__multiply+0x132>
 8005c1e:	6834      	ldr	r4, [r6, #0]
 8005c20:	f105 0114 	add.w	r1, r5, #20
 8005c24:	46b6      	mov	lr, r6
 8005c26:	f04f 0a00 	mov.w	sl, #0
 8005c2a:	880a      	ldrh	r2, [r1, #0]
 8005c2c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c30:	fb09 b202 	mla	r2, r9, r2, fp
 8005c34:	4492      	add	sl, r2
 8005c36:	b2a4      	uxth	r4, r4
 8005c38:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c3c:	f84e 4b04 	str.w	r4, [lr], #4
 8005c40:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c44:	f8be 2000 	ldrh.w	r2, [lr]
 8005c48:	0c24      	lsrs	r4, r4, #16
 8005c4a:	fb09 2404 	mla	r4, r9, r4, r2
 8005c4e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005c52:	458c      	cmp	ip, r1
 8005c54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c58:	d8e7      	bhi.n	8005c2a <__multiply+0xfe>
 8005c5a:	9a01      	ldr	r2, [sp, #4]
 8005c5c:	50b4      	str	r4, [r6, r2]
 8005c5e:	3604      	adds	r6, #4
 8005c60:	e7a3      	b.n	8005baa <__multiply+0x7e>
 8005c62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1a5      	bne.n	8005bb6 <__multiply+0x8a>
 8005c6a:	3f01      	subs	r7, #1
 8005c6c:	e7a1      	b.n	8005bb2 <__multiply+0x86>
 8005c6e:	bf00      	nop
 8005c70:	08007dab 	.word	0x08007dab
 8005c74:	08007d4b 	.word	0x08007d4b

08005c78 <__pow5mult>:
 8005c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	4615      	mov	r5, r2
 8005c7e:	f012 0203 	ands.w	r2, r2, #3
 8005c82:	4606      	mov	r6, r0
 8005c84:	460f      	mov	r7, r1
 8005c86:	d007      	beq.n	8005c98 <__pow5mult+0x20>
 8005c88:	4c25      	ldr	r4, [pc, #148]	; (8005d20 <__pow5mult+0xa8>)
 8005c8a:	3a01      	subs	r2, #1
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c92:	f7ff fe9b 	bl	80059cc <__multadd>
 8005c96:	4607      	mov	r7, r0
 8005c98:	10ad      	asrs	r5, r5, #2
 8005c9a:	d03d      	beq.n	8005d18 <__pow5mult+0xa0>
 8005c9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c9e:	b97c      	cbnz	r4, 8005cc0 <__pow5mult+0x48>
 8005ca0:	2010      	movs	r0, #16
 8005ca2:	f001 f8f7 	bl	8006e94 <malloc>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	6270      	str	r0, [r6, #36]	; 0x24
 8005caa:	b928      	cbnz	r0, 8005cb8 <__pow5mult+0x40>
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <__pow5mult+0xac>)
 8005cae:	481e      	ldr	r0, [pc, #120]	; (8005d28 <__pow5mult+0xb0>)
 8005cb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005cb4:	f000 fa46 	bl	8006144 <__assert_func>
 8005cb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cbc:	6004      	str	r4, [r0, #0]
 8005cbe:	60c4      	str	r4, [r0, #12]
 8005cc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cc8:	b94c      	cbnz	r4, 8005cde <__pow5mult+0x66>
 8005cca:	f240 2171 	movw	r1, #625	; 0x271
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f7ff ff16 	bl	8005b00 <__i2b>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cda:	4604      	mov	r4, r0
 8005cdc:	6003      	str	r3, [r0, #0]
 8005cde:	f04f 0900 	mov.w	r9, #0
 8005ce2:	07eb      	lsls	r3, r5, #31
 8005ce4:	d50a      	bpl.n	8005cfc <__pow5mult+0x84>
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	4622      	mov	r2, r4
 8005cea:	4630      	mov	r0, r6
 8005cec:	f7ff ff1e 	bl	8005b2c <__multiply>
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff fe47 	bl	8005988 <_Bfree>
 8005cfa:	4647      	mov	r7, r8
 8005cfc:	106d      	asrs	r5, r5, #1
 8005cfe:	d00b      	beq.n	8005d18 <__pow5mult+0xa0>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	b938      	cbnz	r0, 8005d14 <__pow5mult+0x9c>
 8005d04:	4622      	mov	r2, r4
 8005d06:	4621      	mov	r1, r4
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7ff ff0f 	bl	8005b2c <__multiply>
 8005d0e:	6020      	str	r0, [r4, #0]
 8005d10:	f8c0 9000 	str.w	r9, [r0]
 8005d14:	4604      	mov	r4, r0
 8005d16:	e7e4      	b.n	8005ce2 <__pow5mult+0x6a>
 8005d18:	4638      	mov	r0, r7
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1e:	bf00      	nop
 8005d20:	08007eb0 	.word	0x08007eb0
 8005d24:	08007d34 	.word	0x08007d34
 8005d28:	08007d4b 	.word	0x08007d4b

08005d2c <__lshift>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	6849      	ldr	r1, [r1, #4]
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	4691      	mov	r9, r2
 8005d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d44:	f108 0601 	add.w	r6, r8, #1
 8005d48:	42b3      	cmp	r3, r6
 8005d4a:	db0b      	blt.n	8005d64 <__lshift+0x38>
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff fddb 	bl	8005908 <_Balloc>
 8005d52:	4605      	mov	r5, r0
 8005d54:	b948      	cbnz	r0, 8005d6a <__lshift+0x3e>
 8005d56:	4602      	mov	r2, r0
 8005d58:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <__lshift+0xd0>)
 8005d5a:	4829      	ldr	r0, [pc, #164]	; (8005e00 <__lshift+0xd4>)
 8005d5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d60:	f000 f9f0 	bl	8006144 <__assert_func>
 8005d64:	3101      	adds	r1, #1
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	e7ee      	b.n	8005d48 <__lshift+0x1c>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f100 0114 	add.w	r1, r0, #20
 8005d70:	f100 0210 	add.w	r2, r0, #16
 8005d74:	4618      	mov	r0, r3
 8005d76:	4553      	cmp	r3, sl
 8005d78:	db33      	blt.n	8005de2 <__lshift+0xb6>
 8005d7a:	6920      	ldr	r0, [r4, #16]
 8005d7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d80:	f104 0314 	add.w	r3, r4, #20
 8005d84:	f019 091f 	ands.w	r9, r9, #31
 8005d88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d90:	d02b      	beq.n	8005dea <__lshift+0xbe>
 8005d92:	f1c9 0e20 	rsb	lr, r9, #32
 8005d96:	468a      	mov	sl, r1
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	fa00 f009 	lsl.w	r0, r0, r9
 8005da0:	4302      	orrs	r2, r0
 8005da2:	f84a 2b04 	str.w	r2, [sl], #4
 8005da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005daa:	459c      	cmp	ip, r3
 8005dac:	fa22 f20e 	lsr.w	r2, r2, lr
 8005db0:	d8f3      	bhi.n	8005d9a <__lshift+0x6e>
 8005db2:	ebac 0304 	sub.w	r3, ip, r4
 8005db6:	3b15      	subs	r3, #21
 8005db8:	f023 0303 	bic.w	r3, r3, #3
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	f104 0015 	add.w	r0, r4, #21
 8005dc2:	4584      	cmp	ip, r0
 8005dc4:	bf38      	it	cc
 8005dc6:	2304      	movcc	r3, #4
 8005dc8:	50ca      	str	r2, [r1, r3]
 8005dca:	b10a      	cbz	r2, 8005dd0 <__lshift+0xa4>
 8005dcc:	f108 0602 	add.w	r6, r8, #2
 8005dd0:	3e01      	subs	r6, #1
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	612e      	str	r6, [r5, #16]
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f7ff fdd6 	bl	8005988 <_Bfree>
 8005ddc:	4628      	mov	r0, r5
 8005dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005de6:	3301      	adds	r3, #1
 8005de8:	e7c5      	b.n	8005d76 <__lshift+0x4a>
 8005dea:	3904      	subs	r1, #4
 8005dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005df4:	459c      	cmp	ip, r3
 8005df6:	d8f9      	bhi.n	8005dec <__lshift+0xc0>
 8005df8:	e7ea      	b.n	8005dd0 <__lshift+0xa4>
 8005dfa:	bf00      	nop
 8005dfc:	08007dab 	.word	0x08007dab
 8005e00:	08007d4b 	.word	0x08007d4b

08005e04 <__mcmp>:
 8005e04:	b530      	push	{r4, r5, lr}
 8005e06:	6902      	ldr	r2, [r0, #16]
 8005e08:	690c      	ldr	r4, [r1, #16]
 8005e0a:	1b12      	subs	r2, r2, r4
 8005e0c:	d10e      	bne.n	8005e2c <__mcmp+0x28>
 8005e0e:	f100 0314 	add.w	r3, r0, #20
 8005e12:	3114      	adds	r1, #20
 8005e14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e24:	42a5      	cmp	r5, r4
 8005e26:	d003      	beq.n	8005e30 <__mcmp+0x2c>
 8005e28:	d305      	bcc.n	8005e36 <__mcmp+0x32>
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	bd30      	pop	{r4, r5, pc}
 8005e30:	4283      	cmp	r3, r0
 8005e32:	d3f3      	bcc.n	8005e1c <__mcmp+0x18>
 8005e34:	e7fa      	b.n	8005e2c <__mcmp+0x28>
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3a:	e7f7      	b.n	8005e2c <__mcmp+0x28>

08005e3c <__mdiff>:
 8005e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	4606      	mov	r6, r0
 8005e44:	4611      	mov	r1, r2
 8005e46:	4620      	mov	r0, r4
 8005e48:	4617      	mov	r7, r2
 8005e4a:	f7ff ffdb 	bl	8005e04 <__mcmp>
 8005e4e:	1e05      	subs	r5, r0, #0
 8005e50:	d110      	bne.n	8005e74 <__mdiff+0x38>
 8005e52:	4629      	mov	r1, r5
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff fd57 	bl	8005908 <_Balloc>
 8005e5a:	b930      	cbnz	r0, 8005e6a <__mdiff+0x2e>
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <__mdiff+0x108>)
 8005e5e:	4602      	mov	r2, r0
 8005e60:	f240 2132 	movw	r1, #562	; 0x232
 8005e64:	4838      	ldr	r0, [pc, #224]	; (8005f48 <__mdiff+0x10c>)
 8005e66:	f000 f96d 	bl	8006144 <__assert_func>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e74:	bfa4      	itt	ge
 8005e76:	463b      	movge	r3, r7
 8005e78:	4627      	movge	r7, r4
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	bfa6      	itte	ge
 8005e80:	461c      	movge	r4, r3
 8005e82:	2500      	movge	r5, #0
 8005e84:	2501      	movlt	r5, #1
 8005e86:	f7ff fd3f 	bl	8005908 <_Balloc>
 8005e8a:	b920      	cbnz	r0, 8005e96 <__mdiff+0x5a>
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <__mdiff+0x108>)
 8005e8e:	4602      	mov	r2, r0
 8005e90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e94:	e7e6      	b.n	8005e64 <__mdiff+0x28>
 8005e96:	693e      	ldr	r6, [r7, #16]
 8005e98:	60c5      	str	r5, [r0, #12]
 8005e9a:	6925      	ldr	r5, [r4, #16]
 8005e9c:	f107 0114 	add.w	r1, r7, #20
 8005ea0:	f104 0914 	add.w	r9, r4, #20
 8005ea4:	f100 0e14 	add.w	lr, r0, #20
 8005ea8:	f107 0210 	add.w	r2, r7, #16
 8005eac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005eb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005eb4:	46f2      	mov	sl, lr
 8005eb6:	2700      	movs	r7, #0
 8005eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005ec0:	fa1f f883 	uxth.w	r8, r3
 8005ec4:	fa17 f78b 	uxtah	r7, r7, fp
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	eba7 0808 	sub.w	r8, r7, r8
 8005ece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005ed6:	fa1f f888 	uxth.w	r8, r8
 8005eda:	141f      	asrs	r7, r3, #16
 8005edc:	454d      	cmp	r5, r9
 8005ede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ee2:	f84a 3b04 	str.w	r3, [sl], #4
 8005ee6:	d8e7      	bhi.n	8005eb8 <__mdiff+0x7c>
 8005ee8:	1b2b      	subs	r3, r5, r4
 8005eea:	3b15      	subs	r3, #21
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	3415      	adds	r4, #21
 8005ef4:	42a5      	cmp	r5, r4
 8005ef6:	bf38      	it	cc
 8005ef8:	2304      	movcc	r3, #4
 8005efa:	4419      	add	r1, r3
 8005efc:	4473      	add	r3, lr
 8005efe:	469e      	mov	lr, r3
 8005f00:	460d      	mov	r5, r1
 8005f02:	4565      	cmp	r5, ip
 8005f04:	d30e      	bcc.n	8005f24 <__mdiff+0xe8>
 8005f06:	f10c 0203 	add.w	r2, ip, #3
 8005f0a:	1a52      	subs	r2, r2, r1
 8005f0c:	f022 0203 	bic.w	r2, r2, #3
 8005f10:	3903      	subs	r1, #3
 8005f12:	458c      	cmp	ip, r1
 8005f14:	bf38      	it	cc
 8005f16:	2200      	movcc	r2, #0
 8005f18:	441a      	add	r2, r3
 8005f1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005f1e:	b17b      	cbz	r3, 8005f40 <__mdiff+0x104>
 8005f20:	6106      	str	r6, [r0, #16]
 8005f22:	e7a5      	b.n	8005e70 <__mdiff+0x34>
 8005f24:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f28:	fa17 f488 	uxtah	r4, r7, r8
 8005f2c:	1422      	asrs	r2, r4, #16
 8005f2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005f32:	b2a4      	uxth	r4, r4
 8005f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f38:	f84e 4b04 	str.w	r4, [lr], #4
 8005f3c:	1417      	asrs	r7, r2, #16
 8005f3e:	e7e0      	b.n	8005f02 <__mdiff+0xc6>
 8005f40:	3e01      	subs	r6, #1
 8005f42:	e7ea      	b.n	8005f1a <__mdiff+0xde>
 8005f44:	08007dab 	.word	0x08007dab
 8005f48:	08007d4b 	.word	0x08007d4b

08005f4c <__d2b>:
 8005f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	4689      	mov	r9, r1
 8005f52:	2101      	movs	r1, #1
 8005f54:	ec57 6b10 	vmov	r6, r7, d0
 8005f58:	4690      	mov	r8, r2
 8005f5a:	f7ff fcd5 	bl	8005908 <_Balloc>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	b930      	cbnz	r0, 8005f70 <__d2b+0x24>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <__d2b+0xb0>)
 8005f66:	4826      	ldr	r0, [pc, #152]	; (8006000 <__d2b+0xb4>)
 8005f68:	f240 310a 	movw	r1, #778	; 0x30a
 8005f6c:	f000 f8ea 	bl	8006144 <__assert_func>
 8005f70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005f74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f78:	bb35      	cbnz	r5, 8005fc8 <__d2b+0x7c>
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	d028      	beq.n	8005fd2 <__d2b+0x86>
 8005f80:	4668      	mov	r0, sp
 8005f82:	9600      	str	r6, [sp, #0]
 8005f84:	f7ff fd8c 	bl	8005aa0 <__lo0bits>
 8005f88:	9900      	ldr	r1, [sp, #0]
 8005f8a:	b300      	cbz	r0, 8005fce <__d2b+0x82>
 8005f8c:	9a01      	ldr	r2, [sp, #4]
 8005f8e:	f1c0 0320 	rsb	r3, r0, #32
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	430b      	orrs	r3, r1
 8005f98:	40c2      	lsrs	r2, r0
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	9201      	str	r2, [sp, #4]
 8005f9e:	9b01      	ldr	r3, [sp, #4]
 8005fa0:	61a3      	str	r3, [r4, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf14      	ite	ne
 8005fa6:	2202      	movne	r2, #2
 8005fa8:	2201      	moveq	r2, #1
 8005faa:	6122      	str	r2, [r4, #16]
 8005fac:	b1d5      	cbz	r5, 8005fe4 <__d2b+0x98>
 8005fae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005fb2:	4405      	add	r5, r0
 8005fb4:	f8c9 5000 	str.w	r5, [r9]
 8005fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fbc:	f8c8 0000 	str.w	r0, [r8]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	b003      	add	sp, #12
 8005fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fcc:	e7d5      	b.n	8005f7a <__d2b+0x2e>
 8005fce:	6161      	str	r1, [r4, #20]
 8005fd0:	e7e5      	b.n	8005f9e <__d2b+0x52>
 8005fd2:	a801      	add	r0, sp, #4
 8005fd4:	f7ff fd64 	bl	8005aa0 <__lo0bits>
 8005fd8:	9b01      	ldr	r3, [sp, #4]
 8005fda:	6163      	str	r3, [r4, #20]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	6122      	str	r2, [r4, #16]
 8005fe0:	3020      	adds	r0, #32
 8005fe2:	e7e3      	b.n	8005fac <__d2b+0x60>
 8005fe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fec:	f8c9 0000 	str.w	r0, [r9]
 8005ff0:	6918      	ldr	r0, [r3, #16]
 8005ff2:	f7ff fd35 	bl	8005a60 <__hi0bits>
 8005ff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ffa:	e7df      	b.n	8005fbc <__d2b+0x70>
 8005ffc:	08007dab 	.word	0x08007dab
 8006000:	08007d4b 	.word	0x08007d4b

08006004 <_mprec_log10>:
 8006004:	2817      	cmp	r0, #23
 8006006:	b5d0      	push	{r4, r6, r7, lr}
 8006008:	4604      	mov	r4, r0
 800600a:	dc07      	bgt.n	800601c <_mprec_log10+0x18>
 800600c:	4809      	ldr	r0, [pc, #36]	; (8006034 <_mprec_log10+0x30>)
 800600e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006012:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006016:	ec41 0b10 	vmov	d0, r0, r1
 800601a:	bdd0      	pop	{r4, r6, r7, pc}
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <_mprec_log10+0x34>)
 800601e:	4f07      	ldr	r7, [pc, #28]	; (800603c <_mprec_log10+0x38>)
 8006020:	2000      	movs	r0, #0
 8006022:	2600      	movs	r6, #0
 8006024:	4632      	mov	r2, r6
 8006026:	463b      	mov	r3, r7
 8006028:	f7fa fafe 	bl	8000628 <__aeabi_dmul>
 800602c:	3c01      	subs	r4, #1
 800602e:	d1f9      	bne.n	8006024 <_mprec_log10+0x20>
 8006030:	e7f1      	b.n	8006016 <_mprec_log10+0x12>
 8006032:	bf00      	nop
 8006034:	08007de8 	.word	0x08007de8
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	40240000 	.word	0x40240000

08006040 <_calloc_r>:
 8006040:	b513      	push	{r0, r1, r4, lr}
 8006042:	434a      	muls	r2, r1
 8006044:	4611      	mov	r1, r2
 8006046:	9201      	str	r2, [sp, #4]
 8006048:	f000 f80a 	bl	8006060 <_malloc_r>
 800604c:	4604      	mov	r4, r0
 800604e:	b118      	cbz	r0, 8006058 <_calloc_r+0x18>
 8006050:	9a01      	ldr	r2, [sp, #4]
 8006052:	2100      	movs	r1, #0
 8006054:	f7ff fb16 	bl	8005684 <memset>
 8006058:	4620      	mov	r0, r4
 800605a:	b002      	add	sp, #8
 800605c:	bd10      	pop	{r4, pc}
	...

08006060 <_malloc_r>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	1ccd      	adds	r5, r1, #3
 8006064:	f025 0503 	bic.w	r5, r5, #3
 8006068:	3508      	adds	r5, #8
 800606a:	2d0c      	cmp	r5, #12
 800606c:	bf38      	it	cc
 800606e:	250c      	movcc	r5, #12
 8006070:	2d00      	cmp	r5, #0
 8006072:	4606      	mov	r6, r0
 8006074:	db01      	blt.n	800607a <_malloc_r+0x1a>
 8006076:	42a9      	cmp	r1, r5
 8006078:	d903      	bls.n	8006082 <_malloc_r+0x22>
 800607a:	230c      	movs	r3, #12
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	2000      	movs	r0, #0
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	f000 ff1d 	bl	8006ec0 <__malloc_lock>
 8006086:	4921      	ldr	r1, [pc, #132]	; (800610c <_malloc_r+0xac>)
 8006088:	680a      	ldr	r2, [r1, #0]
 800608a:	4614      	mov	r4, r2
 800608c:	b99c      	cbnz	r4, 80060b6 <_malloc_r+0x56>
 800608e:	4f20      	ldr	r7, [pc, #128]	; (8006110 <_malloc_r+0xb0>)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b923      	cbnz	r3, 800609e <_malloc_r+0x3e>
 8006094:	4621      	mov	r1, r4
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f83c 	bl	8006114 <_sbrk_r>
 800609c:	6038      	str	r0, [r7, #0]
 800609e:	4629      	mov	r1, r5
 80060a0:	4630      	mov	r0, r6
 80060a2:	f000 f837 	bl	8006114 <_sbrk_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d123      	bne.n	80060f2 <_malloc_r+0x92>
 80060aa:	230c      	movs	r3, #12
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 ff0c 	bl	8006ecc <__malloc_unlock>
 80060b4:	e7e3      	b.n	800607e <_malloc_r+0x1e>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	1b5b      	subs	r3, r3, r5
 80060ba:	d417      	bmi.n	80060ec <_malloc_r+0x8c>
 80060bc:	2b0b      	cmp	r3, #11
 80060be:	d903      	bls.n	80060c8 <_malloc_r+0x68>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	441c      	add	r4, r3
 80060c4:	6025      	str	r5, [r4, #0]
 80060c6:	e004      	b.n	80060d2 <_malloc_r+0x72>
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	42a2      	cmp	r2, r4
 80060cc:	bf0c      	ite	eq
 80060ce:	600b      	streq	r3, [r1, #0]
 80060d0:	6053      	strne	r3, [r2, #4]
 80060d2:	4630      	mov	r0, r6
 80060d4:	f000 fefa 	bl	8006ecc <__malloc_unlock>
 80060d8:	f104 000b 	add.w	r0, r4, #11
 80060dc:	1d23      	adds	r3, r4, #4
 80060de:	f020 0007 	bic.w	r0, r0, #7
 80060e2:	1ac2      	subs	r2, r0, r3
 80060e4:	d0cc      	beq.n	8006080 <_malloc_r+0x20>
 80060e6:	1a1b      	subs	r3, r3, r0
 80060e8:	50a3      	str	r3, [r4, r2]
 80060ea:	e7c9      	b.n	8006080 <_malloc_r+0x20>
 80060ec:	4622      	mov	r2, r4
 80060ee:	6864      	ldr	r4, [r4, #4]
 80060f0:	e7cc      	b.n	800608c <_malloc_r+0x2c>
 80060f2:	1cc4      	adds	r4, r0, #3
 80060f4:	f024 0403 	bic.w	r4, r4, #3
 80060f8:	42a0      	cmp	r0, r4
 80060fa:	d0e3      	beq.n	80060c4 <_malloc_r+0x64>
 80060fc:	1a21      	subs	r1, r4, r0
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f808 	bl	8006114 <_sbrk_r>
 8006104:	3001      	adds	r0, #1
 8006106:	d1dd      	bne.n	80060c4 <_malloc_r+0x64>
 8006108:	e7cf      	b.n	80060aa <_malloc_r+0x4a>
 800610a:	bf00      	nop
 800610c:	200000a4 	.word	0x200000a4
 8006110:	200000a8 	.word	0x200000a8

08006114 <_sbrk_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_sbrk_r+0x1c>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fb fa9c 	bl	800165c <_sbrk>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_sbrk_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_sbrk_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	200001a0 	.word	0x200001a0

08006134 <strcpy>:
 8006134:	4603      	mov	r3, r0
 8006136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800613a:	f803 2b01 	strb.w	r2, [r3], #1
 800613e:	2a00      	cmp	r2, #0
 8006140:	d1f9      	bne.n	8006136 <strcpy+0x2>
 8006142:	4770      	bx	lr

08006144 <__assert_func>:
 8006144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006146:	4614      	mov	r4, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <__assert_func+0x2c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	68d8      	ldr	r0, [r3, #12]
 8006152:	b14c      	cbz	r4, 8006168 <__assert_func+0x24>
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <__assert_func+0x30>)
 8006156:	9100      	str	r1, [sp, #0]
 8006158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800615c:	4906      	ldr	r1, [pc, #24]	; (8006178 <__assert_func+0x34>)
 800615e:	462b      	mov	r3, r5
 8006160:	f000 fe86 	bl	8006e70 <fiprintf>
 8006164:	f001 fab6 	bl	80076d4 <abort>
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__assert_func+0x38>)
 800616a:	461c      	mov	r4, r3
 800616c:	e7f3      	b.n	8006156 <__assert_func+0x12>
 800616e:	bf00      	nop
 8006170:	20000018 	.word	0x20000018
 8006174:	08007ebc 	.word	0x08007ebc
 8006178:	08007ec9 	.word	0x08007ec9
 800617c:	08007ef7 	.word	0x08007ef7

08006180 <quorem>:
 8006180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	6903      	ldr	r3, [r0, #16]
 8006186:	690c      	ldr	r4, [r1, #16]
 8006188:	42a3      	cmp	r3, r4
 800618a:	4607      	mov	r7, r0
 800618c:	f2c0 8081 	blt.w	8006292 <quorem+0x112>
 8006190:	3c01      	subs	r4, #1
 8006192:	f101 0814 	add.w	r8, r1, #20
 8006196:	f100 0514 	add.w	r5, r0, #20
 800619a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a8:	3301      	adds	r3, #1
 80061aa:	429a      	cmp	r2, r3
 80061ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80061b8:	d331      	bcc.n	800621e <quorem+0x9e>
 80061ba:	f04f 0e00 	mov.w	lr, #0
 80061be:	4640      	mov	r0, r8
 80061c0:	46ac      	mov	ip, r5
 80061c2:	46f2      	mov	sl, lr
 80061c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80061c8:	b293      	uxth	r3, r2
 80061ca:	fb06 e303 	mla	r3, r6, r3, lr
 80061ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ebaa 0303 	sub.w	r3, sl, r3
 80061d8:	0c12      	lsrs	r2, r2, #16
 80061da:	f8dc a000 	ldr.w	sl, [ip]
 80061de:	fb06 e202 	mla	r2, r6, r2, lr
 80061e2:	fa13 f38a 	uxtah	r3, r3, sl
 80061e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061ea:	fa1f fa82 	uxth.w	sl, r2
 80061ee:	f8dc 2000 	ldr.w	r2, [ip]
 80061f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006200:	4581      	cmp	r9, r0
 8006202:	f84c 3b04 	str.w	r3, [ip], #4
 8006206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800620a:	d2db      	bcs.n	80061c4 <quorem+0x44>
 800620c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006210:	b92b      	cbnz	r3, 800621e <quorem+0x9e>
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	3b04      	subs	r3, #4
 8006216:	429d      	cmp	r5, r3
 8006218:	461a      	mov	r2, r3
 800621a:	d32e      	bcc.n	800627a <quorem+0xfa>
 800621c:	613c      	str	r4, [r7, #16]
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff fdf0 	bl	8005e04 <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	db24      	blt.n	8006272 <quorem+0xf2>
 8006228:	3601      	adds	r6, #1
 800622a:	4628      	mov	r0, r5
 800622c:	f04f 0c00 	mov.w	ip, #0
 8006230:	f858 2b04 	ldr.w	r2, [r8], #4
 8006234:	f8d0 e000 	ldr.w	lr, [r0]
 8006238:	b293      	uxth	r3, r2
 800623a:	ebac 0303 	sub.w	r3, ip, r3
 800623e:	0c12      	lsrs	r2, r2, #16
 8006240:	fa13 f38e 	uxtah	r3, r3, lr
 8006244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006252:	45c1      	cmp	r9, r8
 8006254:	f840 3b04 	str.w	r3, [r0], #4
 8006258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800625c:	d2e8      	bcs.n	8006230 <quorem+0xb0>
 800625e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006266:	b922      	cbnz	r2, 8006272 <quorem+0xf2>
 8006268:	3b04      	subs	r3, #4
 800626a:	429d      	cmp	r5, r3
 800626c:	461a      	mov	r2, r3
 800626e:	d30a      	bcc.n	8006286 <quorem+0x106>
 8006270:	613c      	str	r4, [r7, #16]
 8006272:	4630      	mov	r0, r6
 8006274:	b003      	add	sp, #12
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	3b04      	subs	r3, #4
 800627e:	2a00      	cmp	r2, #0
 8006280:	d1cc      	bne.n	800621c <quorem+0x9c>
 8006282:	3c01      	subs	r4, #1
 8006284:	e7c7      	b.n	8006216 <quorem+0x96>
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	3b04      	subs	r3, #4
 800628a:	2a00      	cmp	r2, #0
 800628c:	d1f0      	bne.n	8006270 <quorem+0xf0>
 800628e:	3c01      	subs	r4, #1
 8006290:	e7eb      	b.n	800626a <quorem+0xea>
 8006292:	2000      	movs	r0, #0
 8006294:	e7ee      	b.n	8006274 <quorem+0xf4>
	...

08006298 <_dtoa_r>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	ed2d 8b02 	vpush	{d8}
 80062a0:	ec57 6b10 	vmov	r6, r7, d0
 80062a4:	b095      	sub	sp, #84	; 0x54
 80062a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062ac:	9105      	str	r1, [sp, #20]
 80062ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062b2:	4604      	mov	r4, r0
 80062b4:	9209      	str	r2, [sp, #36]	; 0x24
 80062b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b8:	b975      	cbnz	r5, 80062d8 <_dtoa_r+0x40>
 80062ba:	2010      	movs	r0, #16
 80062bc:	f000 fdea 	bl	8006e94 <malloc>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6260      	str	r0, [r4, #36]	; 0x24
 80062c4:	b920      	cbnz	r0, 80062d0 <_dtoa_r+0x38>
 80062c6:	4bb2      	ldr	r3, [pc, #712]	; (8006590 <_dtoa_r+0x2f8>)
 80062c8:	21ea      	movs	r1, #234	; 0xea
 80062ca:	48b2      	ldr	r0, [pc, #712]	; (8006594 <_dtoa_r+0x2fc>)
 80062cc:	f7ff ff3a 	bl	8006144 <__assert_func>
 80062d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062d4:	6005      	str	r5, [r0, #0]
 80062d6:	60c5      	str	r5, [r0, #12]
 80062d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062da:	6819      	ldr	r1, [r3, #0]
 80062dc:	b151      	cbz	r1, 80062f4 <_dtoa_r+0x5c>
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	604a      	str	r2, [r1, #4]
 80062e2:	2301      	movs	r3, #1
 80062e4:	4093      	lsls	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff fb4d 	bl	8005988 <_Bfree>
 80062ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	1e3b      	subs	r3, r7, #0
 80062f6:	bfb9      	ittee	lt
 80062f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062fc:	9303      	strlt	r3, [sp, #12]
 80062fe:	2300      	movge	r3, #0
 8006300:	f8c8 3000 	strge.w	r3, [r8]
 8006304:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006308:	4ba3      	ldr	r3, [pc, #652]	; (8006598 <_dtoa_r+0x300>)
 800630a:	bfbc      	itt	lt
 800630c:	2201      	movlt	r2, #1
 800630e:	f8c8 2000 	strlt.w	r2, [r8]
 8006312:	ea33 0309 	bics.w	r3, r3, r9
 8006316:	d11b      	bne.n	8006350 <_dtoa_r+0xb8>
 8006318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800631a:	f242 730f 	movw	r3, #9999	; 0x270f
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006324:	4333      	orrs	r3, r6
 8006326:	f000 857a 	beq.w	8006e1e <_dtoa_r+0xb86>
 800632a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800632c:	b963      	cbnz	r3, 8006348 <_dtoa_r+0xb0>
 800632e:	4b9b      	ldr	r3, [pc, #620]	; (800659c <_dtoa_r+0x304>)
 8006330:	e024      	b.n	800637c <_dtoa_r+0xe4>
 8006332:	4b9b      	ldr	r3, [pc, #620]	; (80065a0 <_dtoa_r+0x308>)
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	3308      	adds	r3, #8
 8006338:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	9800      	ldr	r0, [sp, #0]
 800633e:	b015      	add	sp, #84	; 0x54
 8006340:	ecbd 8b02 	vpop	{d8}
 8006344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006348:	4b94      	ldr	r3, [pc, #592]	; (800659c <_dtoa_r+0x304>)
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	3303      	adds	r3, #3
 800634e:	e7f3      	b.n	8006338 <_dtoa_r+0xa0>
 8006350:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006354:	2200      	movs	r2, #0
 8006356:	ec51 0b17 	vmov	r0, r1, d7
 800635a:	2300      	movs	r3, #0
 800635c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006360:	f7fa fbca 	bl	8000af8 <__aeabi_dcmpeq>
 8006364:	4680      	mov	r8, r0
 8006366:	b158      	cbz	r0, 8006380 <_dtoa_r+0xe8>
 8006368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800636a:	2301      	movs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 8551 	beq.w	8006e18 <_dtoa_r+0xb80>
 8006376:	488b      	ldr	r0, [pc, #556]	; (80065a4 <_dtoa_r+0x30c>)
 8006378:	6018      	str	r0, [r3, #0]
 800637a:	1e43      	subs	r3, r0, #1
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	e7dd      	b.n	800633c <_dtoa_r+0xa4>
 8006380:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006384:	aa12      	add	r2, sp, #72	; 0x48
 8006386:	a913      	add	r1, sp, #76	; 0x4c
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fddf 	bl	8005f4c <__d2b>
 800638e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006392:	4683      	mov	fp, r0
 8006394:	2d00      	cmp	r5, #0
 8006396:	d07c      	beq.n	8006492 <_dtoa_r+0x1fa>
 8006398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800639a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800639e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063b2:	4b7d      	ldr	r3, [pc, #500]	; (80065a8 <_dtoa_r+0x310>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	4639      	mov	r1, r7
 80063ba:	f7f9 ff7d 	bl	80002b8 <__aeabi_dsub>
 80063be:	a36e      	add	r3, pc, #440	; (adr r3, 8006578 <_dtoa_r+0x2e0>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa f930 	bl	8000628 <__aeabi_dmul>
 80063c8:	a36d      	add	r3, pc, #436	; (adr r3, 8006580 <_dtoa_r+0x2e8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f7f9 ff75 	bl	80002bc <__adddf3>
 80063d2:	4606      	mov	r6, r0
 80063d4:	4628      	mov	r0, r5
 80063d6:	460f      	mov	r7, r1
 80063d8:	f7fa f8bc 	bl	8000554 <__aeabi_i2d>
 80063dc:	a36a      	add	r3, pc, #424	; (adr r3, 8006588 <_dtoa_r+0x2f0>)
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	f7fa f921 	bl	8000628 <__aeabi_dmul>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4630      	mov	r0, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	f7f9 ff65 	bl	80002bc <__adddf3>
 80063f2:	4606      	mov	r6, r0
 80063f4:	460f      	mov	r7, r1
 80063f6:	f7fa fbb1 	bl	8000b5c <__aeabi_d2iz>
 80063fa:	2200      	movs	r2, #0
 80063fc:	4682      	mov	sl, r0
 80063fe:	2300      	movs	r3, #0
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fb82 	bl	8000b0c <__aeabi_dcmplt>
 8006408:	b148      	cbz	r0, 800641e <_dtoa_r+0x186>
 800640a:	4650      	mov	r0, sl
 800640c:	f7fa f8a2 	bl	8000554 <__aeabi_i2d>
 8006410:	4632      	mov	r2, r6
 8006412:	463b      	mov	r3, r7
 8006414:	f7fa fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8006418:	b908      	cbnz	r0, 800641e <_dtoa_r+0x186>
 800641a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800641e:	f1ba 0f16 	cmp.w	sl, #22
 8006422:	d854      	bhi.n	80064ce <_dtoa_r+0x236>
 8006424:	4b61      	ldr	r3, [pc, #388]	; (80065ac <_dtoa_r+0x314>)
 8006426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006432:	f7fa fb6b 	bl	8000b0c <__aeabi_dcmplt>
 8006436:	2800      	cmp	r0, #0
 8006438:	d04b      	beq.n	80064d2 <_dtoa_r+0x23a>
 800643a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800643e:	2300      	movs	r3, #0
 8006440:	930e      	str	r3, [sp, #56]	; 0x38
 8006442:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006444:	1b5d      	subs	r5, r3, r5
 8006446:	1e6b      	subs	r3, r5, #1
 8006448:	9304      	str	r3, [sp, #16]
 800644a:	bf43      	ittte	mi
 800644c:	2300      	movmi	r3, #0
 800644e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006452:	9304      	strmi	r3, [sp, #16]
 8006454:	f04f 0800 	movpl.w	r8, #0
 8006458:	f1ba 0f00 	cmp.w	sl, #0
 800645c:	db3b      	blt.n	80064d6 <_dtoa_r+0x23e>
 800645e:	9b04      	ldr	r3, [sp, #16]
 8006460:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006464:	4453      	add	r3, sl
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	2300      	movs	r3, #0
 800646a:	9306      	str	r3, [sp, #24]
 800646c:	9b05      	ldr	r3, [sp, #20]
 800646e:	2b09      	cmp	r3, #9
 8006470:	d869      	bhi.n	8006546 <_dtoa_r+0x2ae>
 8006472:	2b05      	cmp	r3, #5
 8006474:	bfc4      	itt	gt
 8006476:	3b04      	subgt	r3, #4
 8006478:	9305      	strgt	r3, [sp, #20]
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	f1a3 0302 	sub.w	r3, r3, #2
 8006480:	bfcc      	ite	gt
 8006482:	2500      	movgt	r5, #0
 8006484:	2501      	movle	r5, #1
 8006486:	2b03      	cmp	r3, #3
 8006488:	d869      	bhi.n	800655e <_dtoa_r+0x2c6>
 800648a:	e8df f003 	tbb	[pc, r3]
 800648e:	4e2c      	.short	0x4e2c
 8006490:	5a4c      	.short	0x5a4c
 8006492:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006496:	441d      	add	r5, r3
 8006498:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800649c:	2b20      	cmp	r3, #32
 800649e:	bfc1      	itttt	gt
 80064a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80064ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064b0:	bfda      	itte	le
 80064b2:	f1c3 0320 	rsble	r3, r3, #32
 80064b6:	fa06 f003 	lslle.w	r0, r6, r3
 80064ba:	4318      	orrgt	r0, r3
 80064bc:	f7fa f83a 	bl	8000534 <__aeabi_ui2d>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4606      	mov	r6, r0
 80064c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064c8:	3d01      	subs	r5, #1
 80064ca:	9310      	str	r3, [sp, #64]	; 0x40
 80064cc:	e771      	b.n	80063b2 <_dtoa_r+0x11a>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e7b6      	b.n	8006440 <_dtoa_r+0x1a8>
 80064d2:	900e      	str	r0, [sp, #56]	; 0x38
 80064d4:	e7b5      	b.n	8006442 <_dtoa_r+0x1aa>
 80064d6:	f1ca 0300 	rsb	r3, sl, #0
 80064da:	9306      	str	r3, [sp, #24]
 80064dc:	2300      	movs	r3, #0
 80064de:	eba8 080a 	sub.w	r8, r8, sl
 80064e2:	930d      	str	r3, [sp, #52]	; 0x34
 80064e4:	e7c2      	b.n	800646c <_dtoa_r+0x1d4>
 80064e6:	2300      	movs	r3, #0
 80064e8:	9308      	str	r3, [sp, #32]
 80064ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dc39      	bgt.n	8006564 <_dtoa_r+0x2cc>
 80064f0:	f04f 0901 	mov.w	r9, #1
 80064f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064f8:	464b      	mov	r3, r9
 80064fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80064fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006500:	2200      	movs	r2, #0
 8006502:	6042      	str	r2, [r0, #4]
 8006504:	2204      	movs	r2, #4
 8006506:	f102 0614 	add.w	r6, r2, #20
 800650a:	429e      	cmp	r6, r3
 800650c:	6841      	ldr	r1, [r0, #4]
 800650e:	d92f      	bls.n	8006570 <_dtoa_r+0x2d8>
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff f9f9 	bl	8005908 <_Balloc>
 8006516:	9000      	str	r0, [sp, #0]
 8006518:	2800      	cmp	r0, #0
 800651a:	d14b      	bne.n	80065b4 <_dtoa_r+0x31c>
 800651c:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <_dtoa_r+0x318>)
 800651e:	4602      	mov	r2, r0
 8006520:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006524:	e6d1      	b.n	80062ca <_dtoa_r+0x32>
 8006526:	2301      	movs	r3, #1
 8006528:	e7de      	b.n	80064e8 <_dtoa_r+0x250>
 800652a:	2300      	movs	r3, #0
 800652c:	9308      	str	r3, [sp, #32]
 800652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006530:	eb0a 0903 	add.w	r9, sl, r3
 8006534:	f109 0301 	add.w	r3, r9, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	bfb8      	it	lt
 800653e:	2301      	movlt	r3, #1
 8006540:	e7dd      	b.n	80064fe <_dtoa_r+0x266>
 8006542:	2301      	movs	r3, #1
 8006544:	e7f2      	b.n	800652c <_dtoa_r+0x294>
 8006546:	2501      	movs	r5, #1
 8006548:	2300      	movs	r3, #0
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	9508      	str	r5, [sp, #32]
 800654e:	f04f 39ff 	mov.w	r9, #4294967295
 8006552:	2200      	movs	r2, #0
 8006554:	f8cd 9004 	str.w	r9, [sp, #4]
 8006558:	2312      	movs	r3, #18
 800655a:	9209      	str	r2, [sp, #36]	; 0x24
 800655c:	e7cf      	b.n	80064fe <_dtoa_r+0x266>
 800655e:	2301      	movs	r3, #1
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	e7f4      	b.n	800654e <_dtoa_r+0x2b6>
 8006564:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006568:	f8cd 9004 	str.w	r9, [sp, #4]
 800656c:	464b      	mov	r3, r9
 800656e:	e7c6      	b.n	80064fe <_dtoa_r+0x266>
 8006570:	3101      	adds	r1, #1
 8006572:	6041      	str	r1, [r0, #4]
 8006574:	0052      	lsls	r2, r2, #1
 8006576:	e7c6      	b.n	8006506 <_dtoa_r+0x26e>
 8006578:	636f4361 	.word	0x636f4361
 800657c:	3fd287a7 	.word	0x3fd287a7
 8006580:	8b60c8b3 	.word	0x8b60c8b3
 8006584:	3fc68a28 	.word	0x3fc68a28
 8006588:	509f79fb 	.word	0x509f79fb
 800658c:	3fd34413 	.word	0x3fd34413
 8006590:	08007d34 	.word	0x08007d34
 8006594:	08007f07 	.word	0x08007f07
 8006598:	7ff00000 	.word	0x7ff00000
 800659c:	08007f01 	.word	0x08007f01
 80065a0:	08007ef8 	.word	0x08007ef8
 80065a4:	08007f06 	.word	0x08007f06
 80065a8:	3ff80000 	.word	0x3ff80000
 80065ac:	08007de8 	.word	0x08007de8
 80065b0:	08007dab 	.word	0x08007dab
 80065b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065b6:	9a00      	ldr	r2, [sp, #0]
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	2b0e      	cmp	r3, #14
 80065be:	f200 80ad 	bhi.w	800671c <_dtoa_r+0x484>
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	f000 80aa 	beq.w	800671c <_dtoa_r+0x484>
 80065c8:	f1ba 0f00 	cmp.w	sl, #0
 80065cc:	dd36      	ble.n	800663c <_dtoa_r+0x3a4>
 80065ce:	4ac3      	ldr	r2, [pc, #780]	; (80068dc <_dtoa_r+0x644>)
 80065d0:	f00a 030f 	and.w	r3, sl, #15
 80065d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065d8:	ed93 7b00 	vldr	d7, [r3]
 80065dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80065e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80065e4:	eeb0 8a47 	vmov.f32	s16, s14
 80065e8:	eef0 8a67 	vmov.f32	s17, s15
 80065ec:	d016      	beq.n	800661c <_dtoa_r+0x384>
 80065ee:	4bbc      	ldr	r3, [pc, #752]	; (80068e0 <_dtoa_r+0x648>)
 80065f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065f8:	f7fa f940 	bl	800087c <__aeabi_ddiv>
 80065fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006600:	f007 070f 	and.w	r7, r7, #15
 8006604:	2503      	movs	r5, #3
 8006606:	4eb6      	ldr	r6, [pc, #728]	; (80068e0 <_dtoa_r+0x648>)
 8006608:	b957      	cbnz	r7, 8006620 <_dtoa_r+0x388>
 800660a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660e:	ec53 2b18 	vmov	r2, r3, d8
 8006612:	f7fa f933 	bl	800087c <__aeabi_ddiv>
 8006616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800661a:	e029      	b.n	8006670 <_dtoa_r+0x3d8>
 800661c:	2502      	movs	r5, #2
 800661e:	e7f2      	b.n	8006606 <_dtoa_r+0x36e>
 8006620:	07f9      	lsls	r1, r7, #31
 8006622:	d508      	bpl.n	8006636 <_dtoa_r+0x39e>
 8006624:	ec51 0b18 	vmov	r0, r1, d8
 8006628:	e9d6 2300 	ldrd	r2, r3, [r6]
 800662c:	f7f9 fffc 	bl	8000628 <__aeabi_dmul>
 8006630:	ec41 0b18 	vmov	d8, r0, r1
 8006634:	3501      	adds	r5, #1
 8006636:	107f      	asrs	r7, r7, #1
 8006638:	3608      	adds	r6, #8
 800663a:	e7e5      	b.n	8006608 <_dtoa_r+0x370>
 800663c:	f000 80a6 	beq.w	800678c <_dtoa_r+0x4f4>
 8006640:	f1ca 0600 	rsb	r6, sl, #0
 8006644:	4ba5      	ldr	r3, [pc, #660]	; (80068dc <_dtoa_r+0x644>)
 8006646:	4fa6      	ldr	r7, [pc, #664]	; (80068e0 <_dtoa_r+0x648>)
 8006648:	f006 020f 	and.w	r2, r6, #15
 800664c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006658:	f7f9 ffe6 	bl	8000628 <__aeabi_dmul>
 800665c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006660:	1136      	asrs	r6, r6, #4
 8006662:	2300      	movs	r3, #0
 8006664:	2502      	movs	r5, #2
 8006666:	2e00      	cmp	r6, #0
 8006668:	f040 8085 	bne.w	8006776 <_dtoa_r+0x4de>
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1d2      	bne.n	8006616 <_dtoa_r+0x37e>
 8006670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 808c 	beq.w	8006790 <_dtoa_r+0x4f8>
 8006678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800667c:	4b99      	ldr	r3, [pc, #612]	; (80068e4 <_dtoa_r+0x64c>)
 800667e:	2200      	movs	r2, #0
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7fa fa42 	bl	8000b0c <__aeabi_dcmplt>
 8006688:	2800      	cmp	r0, #0
 800668a:	f000 8081 	beq.w	8006790 <_dtoa_r+0x4f8>
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d07d      	beq.n	8006790 <_dtoa_r+0x4f8>
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	dd3c      	ble.n	8006714 <_dtoa_r+0x47c>
 800669a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	2200      	movs	r2, #0
 80066a2:	4b91      	ldr	r3, [pc, #580]	; (80068e8 <_dtoa_r+0x650>)
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7f9 ffbe 	bl	8000628 <__aeabi_dmul>
 80066ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b0:	3501      	adds	r5, #1
 80066b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7f9 ff4a 	bl	8000554 <__aeabi_i2d>
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	f7f9 ffb0 	bl	8000628 <__aeabi_dmul>
 80066c8:	4b88      	ldr	r3, [pc, #544]	; (80068ec <_dtoa_r+0x654>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	f7f9 fdf6 	bl	80002bc <__adddf3>
 80066d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d8:	9303      	str	r3, [sp, #12]
 80066da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d15c      	bne.n	800679a <_dtoa_r+0x502>
 80066e0:	4b83      	ldr	r3, [pc, #524]	; (80068f0 <_dtoa_r+0x658>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	4630      	mov	r0, r6
 80066e6:	4639      	mov	r1, r7
 80066e8:	f7f9 fde6 	bl	80002b8 <__aeabi_dsub>
 80066ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f0:	4606      	mov	r6, r0
 80066f2:	460f      	mov	r7, r1
 80066f4:	f7fa fa28 	bl	8000b48 <__aeabi_dcmpgt>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f040 8296 	bne.w	8006c2a <_dtoa_r+0x992>
 80066fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006702:	4630      	mov	r0, r6
 8006704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa f9ff 	bl	8000b0c <__aeabi_dcmplt>
 800670e:	2800      	cmp	r0, #0
 8006710:	f040 8288 	bne.w	8006c24 <_dtoa_r+0x98c>
 8006714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006718:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800671c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800671e:	2b00      	cmp	r3, #0
 8006720:	f2c0 8158 	blt.w	80069d4 <_dtoa_r+0x73c>
 8006724:	f1ba 0f0e 	cmp.w	sl, #14
 8006728:	f300 8154 	bgt.w	80069d4 <_dtoa_r+0x73c>
 800672c:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <_dtoa_r+0x644>)
 800672e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006732:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	f280 80e3 	bge.w	8006904 <_dtoa_r+0x66c>
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f300 80df 	bgt.w	8006904 <_dtoa_r+0x66c>
 8006746:	f040 826d 	bne.w	8006c24 <_dtoa_r+0x98c>
 800674a:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <_dtoa_r+0x658>)
 800674c:	2200      	movs	r2, #0
 800674e:	4640      	mov	r0, r8
 8006750:	4649      	mov	r1, r9
 8006752:	f7f9 ff69 	bl	8000628 <__aeabi_dmul>
 8006756:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800675a:	f7fa f9eb 	bl	8000b34 <__aeabi_dcmpge>
 800675e:	9e01      	ldr	r6, [sp, #4]
 8006760:	4637      	mov	r7, r6
 8006762:	2800      	cmp	r0, #0
 8006764:	f040 8243 	bne.w	8006bee <_dtoa_r+0x956>
 8006768:	9d00      	ldr	r5, [sp, #0]
 800676a:	2331      	movs	r3, #49	; 0x31
 800676c:	f805 3b01 	strb.w	r3, [r5], #1
 8006770:	f10a 0a01 	add.w	sl, sl, #1
 8006774:	e23f      	b.n	8006bf6 <_dtoa_r+0x95e>
 8006776:	07f2      	lsls	r2, r6, #31
 8006778:	d505      	bpl.n	8006786 <_dtoa_r+0x4ee>
 800677a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677e:	f7f9 ff53 	bl	8000628 <__aeabi_dmul>
 8006782:	3501      	adds	r5, #1
 8006784:	2301      	movs	r3, #1
 8006786:	1076      	asrs	r6, r6, #1
 8006788:	3708      	adds	r7, #8
 800678a:	e76c      	b.n	8006666 <_dtoa_r+0x3ce>
 800678c:	2502      	movs	r5, #2
 800678e:	e76f      	b.n	8006670 <_dtoa_r+0x3d8>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	f8cd a01c 	str.w	sl, [sp, #28]
 8006796:	930c      	str	r3, [sp, #48]	; 0x30
 8006798:	e78d      	b.n	80066b6 <_dtoa_r+0x41e>
 800679a:	9900      	ldr	r1, [sp, #0]
 800679c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800679e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067a0:	4b4e      	ldr	r3, [pc, #312]	; (80068dc <_dtoa_r+0x644>)
 80067a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067a6:	4401      	add	r1, r0
 80067a8:	9102      	str	r1, [sp, #8]
 80067aa:	9908      	ldr	r1, [sp, #32]
 80067ac:	eeb0 8a47 	vmov.f32	s16, s14
 80067b0:	eef0 8a67 	vmov.f32	s17, s15
 80067b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067bc:	2900      	cmp	r1, #0
 80067be:	d045      	beq.n	800684c <_dtoa_r+0x5b4>
 80067c0:	494c      	ldr	r1, [pc, #304]	; (80068f4 <_dtoa_r+0x65c>)
 80067c2:	2000      	movs	r0, #0
 80067c4:	f7fa f85a 	bl	800087c <__aeabi_ddiv>
 80067c8:	ec53 2b18 	vmov	r2, r3, d8
 80067cc:	f7f9 fd74 	bl	80002b8 <__aeabi_dsub>
 80067d0:	9d00      	ldr	r5, [sp, #0]
 80067d2:	ec41 0b18 	vmov	d8, r0, r1
 80067d6:	4639      	mov	r1, r7
 80067d8:	4630      	mov	r0, r6
 80067da:	f7fa f9bf 	bl	8000b5c <__aeabi_d2iz>
 80067de:	900c      	str	r0, [sp, #48]	; 0x30
 80067e0:	f7f9 feb8 	bl	8000554 <__aeabi_i2d>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7f9 fd64 	bl	80002b8 <__aeabi_dsub>
 80067f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f2:	3330      	adds	r3, #48	; 0x30
 80067f4:	f805 3b01 	strb.w	r3, [r5], #1
 80067f8:	ec53 2b18 	vmov	r2, r3, d8
 80067fc:	4606      	mov	r6, r0
 80067fe:	460f      	mov	r7, r1
 8006800:	f7fa f984 	bl	8000b0c <__aeabi_dcmplt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d165      	bne.n	80068d4 <_dtoa_r+0x63c>
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4935      	ldr	r1, [pc, #212]	; (80068e4 <_dtoa_r+0x64c>)
 800680e:	2000      	movs	r0, #0
 8006810:	f7f9 fd52 	bl	80002b8 <__aeabi_dsub>
 8006814:	ec53 2b18 	vmov	r2, r3, d8
 8006818:	f7fa f978 	bl	8000b0c <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	f040 80b9 	bne.w	8006994 <_dtoa_r+0x6fc>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	429d      	cmp	r5, r3
 8006826:	f43f af75 	beq.w	8006714 <_dtoa_r+0x47c>
 800682a:	4b2f      	ldr	r3, [pc, #188]	; (80068e8 <_dtoa_r+0x650>)
 800682c:	ec51 0b18 	vmov	r0, r1, d8
 8006830:	2200      	movs	r2, #0
 8006832:	f7f9 fef9 	bl	8000628 <__aeabi_dmul>
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <_dtoa_r+0x650>)
 8006838:	ec41 0b18 	vmov	d8, r0, r1
 800683c:	2200      	movs	r2, #0
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7f9 fef1 	bl	8000628 <__aeabi_dmul>
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	e7c4      	b.n	80067d6 <_dtoa_r+0x53e>
 800684c:	ec51 0b17 	vmov	r0, r1, d7
 8006850:	f7f9 feea 	bl	8000628 <__aeabi_dmul>
 8006854:	9b02      	ldr	r3, [sp, #8]
 8006856:	9d00      	ldr	r5, [sp, #0]
 8006858:	930c      	str	r3, [sp, #48]	; 0x30
 800685a:	ec41 0b18 	vmov	d8, r0, r1
 800685e:	4639      	mov	r1, r7
 8006860:	4630      	mov	r0, r6
 8006862:	f7fa f97b 	bl	8000b5c <__aeabi_d2iz>
 8006866:	9011      	str	r0, [sp, #68]	; 0x44
 8006868:	f7f9 fe74 	bl	8000554 <__aeabi_i2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4630      	mov	r0, r6
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fd20 	bl	80002b8 <__aeabi_dsub>
 8006878:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800687a:	3330      	adds	r3, #48	; 0x30
 800687c:	f805 3b01 	strb.w	r3, [r5], #1
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	429d      	cmp	r5, r3
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	d134      	bne.n	80068f8 <_dtoa_r+0x660>
 800688e:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <_dtoa_r+0x65c>)
 8006890:	ec51 0b18 	vmov	r0, r1, d8
 8006894:	f7f9 fd12 	bl	80002bc <__adddf3>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4630      	mov	r0, r6
 800689e:	4639      	mov	r1, r7
 80068a0:	f7fa f952 	bl	8000b48 <__aeabi_dcmpgt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d175      	bne.n	8006994 <_dtoa_r+0x6fc>
 80068a8:	ec53 2b18 	vmov	r2, r3, d8
 80068ac:	4911      	ldr	r1, [pc, #68]	; (80068f4 <_dtoa_r+0x65c>)
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7f9 fd02 	bl	80002b8 <__aeabi_dsub>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7fa f926 	bl	8000b0c <__aeabi_dcmplt>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f43f af27 	beq.w	8006714 <_dtoa_r+0x47c>
 80068c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068c8:	1e6b      	subs	r3, r5, #1
 80068ca:	930c      	str	r3, [sp, #48]	; 0x30
 80068cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068d0:	2b30      	cmp	r3, #48	; 0x30
 80068d2:	d0f8      	beq.n	80068c6 <_dtoa_r+0x62e>
 80068d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068d8:	e04a      	b.n	8006970 <_dtoa_r+0x6d8>
 80068da:	bf00      	nop
 80068dc:	08007de8 	.word	0x08007de8
 80068e0:	08007dc0 	.word	0x08007dc0
 80068e4:	3ff00000 	.word	0x3ff00000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	401c0000 	.word	0x401c0000
 80068f0:	40140000 	.word	0x40140000
 80068f4:	3fe00000 	.word	0x3fe00000
 80068f8:	4baf      	ldr	r3, [pc, #700]	; (8006bb8 <_dtoa_r+0x920>)
 80068fa:	f7f9 fe95 	bl	8000628 <__aeabi_dmul>
 80068fe:	4606      	mov	r6, r0
 8006900:	460f      	mov	r7, r1
 8006902:	e7ac      	b.n	800685e <_dtoa_r+0x5c6>
 8006904:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006908:	9d00      	ldr	r5, [sp, #0]
 800690a:	4642      	mov	r2, r8
 800690c:	464b      	mov	r3, r9
 800690e:	4630      	mov	r0, r6
 8006910:	4639      	mov	r1, r7
 8006912:	f7f9 ffb3 	bl	800087c <__aeabi_ddiv>
 8006916:	f7fa f921 	bl	8000b5c <__aeabi_d2iz>
 800691a:	9002      	str	r0, [sp, #8]
 800691c:	f7f9 fe1a 	bl	8000554 <__aeabi_i2d>
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	f7f9 fe80 	bl	8000628 <__aeabi_dmul>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4630      	mov	r0, r6
 800692e:	4639      	mov	r1, r7
 8006930:	f7f9 fcc2 	bl	80002b8 <__aeabi_dsub>
 8006934:	9e02      	ldr	r6, [sp, #8]
 8006936:	9f01      	ldr	r7, [sp, #4]
 8006938:	3630      	adds	r6, #48	; 0x30
 800693a:	f805 6b01 	strb.w	r6, [r5], #1
 800693e:	9e00      	ldr	r6, [sp, #0]
 8006940:	1bae      	subs	r6, r5, r6
 8006942:	42b7      	cmp	r7, r6
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	d137      	bne.n	80069ba <_dtoa_r+0x722>
 800694a:	f7f9 fcb7 	bl	80002bc <__adddf3>
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	f7fa f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 800695a:	b9c8      	cbnz	r0, 8006990 <_dtoa_r+0x6f8>
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	4630      	mov	r0, r6
 8006962:	4639      	mov	r1, r7
 8006964:	f7fa f8c8 	bl	8000af8 <__aeabi_dcmpeq>
 8006968:	b110      	cbz	r0, 8006970 <_dtoa_r+0x6d8>
 800696a:	9b02      	ldr	r3, [sp, #8]
 800696c:	07d9      	lsls	r1, r3, #31
 800696e:	d40f      	bmi.n	8006990 <_dtoa_r+0x6f8>
 8006970:	4620      	mov	r0, r4
 8006972:	4659      	mov	r1, fp
 8006974:	f7ff f808 	bl	8005988 <_Bfree>
 8006978:	2300      	movs	r3, #0
 800697a:	702b      	strb	r3, [r5, #0]
 800697c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800697e:	f10a 0001 	add.w	r0, sl, #1
 8006982:	6018      	str	r0, [r3, #0]
 8006984:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006986:	2b00      	cmp	r3, #0
 8006988:	f43f acd8 	beq.w	800633c <_dtoa_r+0xa4>
 800698c:	601d      	str	r5, [r3, #0]
 800698e:	e4d5      	b.n	800633c <_dtoa_r+0xa4>
 8006990:	f8cd a01c 	str.w	sl, [sp, #28]
 8006994:	462b      	mov	r3, r5
 8006996:	461d      	mov	r5, r3
 8006998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800699c:	2a39      	cmp	r2, #57	; 0x39
 800699e:	d108      	bne.n	80069b2 <_dtoa_r+0x71a>
 80069a0:	9a00      	ldr	r2, [sp, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d1f7      	bne.n	8006996 <_dtoa_r+0x6fe>
 80069a6:	9a07      	ldr	r2, [sp, #28]
 80069a8:	9900      	ldr	r1, [sp, #0]
 80069aa:	3201      	adds	r2, #1
 80069ac:	9207      	str	r2, [sp, #28]
 80069ae:	2230      	movs	r2, #48	; 0x30
 80069b0:	700a      	strb	r2, [r1, #0]
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	3201      	adds	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e78c      	b.n	80068d4 <_dtoa_r+0x63c>
 80069ba:	4b7f      	ldr	r3, [pc, #508]	; (8006bb8 <_dtoa_r+0x920>)
 80069bc:	2200      	movs	r2, #0
 80069be:	f7f9 fe33 	bl	8000628 <__aeabi_dmul>
 80069c2:	2200      	movs	r2, #0
 80069c4:	2300      	movs	r3, #0
 80069c6:	4606      	mov	r6, r0
 80069c8:	460f      	mov	r7, r1
 80069ca:	f7fa f895 	bl	8000af8 <__aeabi_dcmpeq>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d09b      	beq.n	800690a <_dtoa_r+0x672>
 80069d2:	e7cd      	b.n	8006970 <_dtoa_r+0x6d8>
 80069d4:	9a08      	ldr	r2, [sp, #32]
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	f000 80c4 	beq.w	8006b64 <_dtoa_r+0x8cc>
 80069dc:	9a05      	ldr	r2, [sp, #20]
 80069de:	2a01      	cmp	r2, #1
 80069e0:	f300 80a8 	bgt.w	8006b34 <_dtoa_r+0x89c>
 80069e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	f000 80a0 	beq.w	8006b2c <_dtoa_r+0x894>
 80069ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069f0:	9e06      	ldr	r6, [sp, #24]
 80069f2:	4645      	mov	r5, r8
 80069f4:	9a04      	ldr	r2, [sp, #16]
 80069f6:	2101      	movs	r1, #1
 80069f8:	441a      	add	r2, r3
 80069fa:	4620      	mov	r0, r4
 80069fc:	4498      	add	r8, r3
 80069fe:	9204      	str	r2, [sp, #16]
 8006a00:	f7ff f87e 	bl	8005b00 <__i2b>
 8006a04:	4607      	mov	r7, r0
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	dd0b      	ble.n	8006a22 <_dtoa_r+0x78a>
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dd08      	ble.n	8006a22 <_dtoa_r+0x78a>
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	bfa8      	it	ge
 8006a16:	462b      	movge	r3, r5
 8006a18:	eba8 0803 	sub.w	r8, r8, r3
 8006a1c:	1aed      	subs	r5, r5, r3
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	9b06      	ldr	r3, [sp, #24]
 8006a24:	b1fb      	cbz	r3, 8006a66 <_dtoa_r+0x7ce>
 8006a26:	9b08      	ldr	r3, [sp, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 809f 	beq.w	8006b6c <_dtoa_r+0x8d4>
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	dd11      	ble.n	8006a56 <_dtoa_r+0x7be>
 8006a32:	4639      	mov	r1, r7
 8006a34:	4632      	mov	r2, r6
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff f91e 	bl	8005c78 <__pow5mult>
 8006a3c:	465a      	mov	r2, fp
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4607      	mov	r7, r0
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7ff f872 	bl	8005b2c <__multiply>
 8006a48:	4659      	mov	r1, fp
 8006a4a:	9007      	str	r0, [sp, #28]
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7fe ff9b 	bl	8005988 <_Bfree>
 8006a52:	9b07      	ldr	r3, [sp, #28]
 8006a54:	469b      	mov	fp, r3
 8006a56:	9b06      	ldr	r3, [sp, #24]
 8006a58:	1b9a      	subs	r2, r3, r6
 8006a5a:	d004      	beq.n	8006a66 <_dtoa_r+0x7ce>
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff f90a 	bl	8005c78 <__pow5mult>
 8006a64:	4683      	mov	fp, r0
 8006a66:	2101      	movs	r1, #1
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7ff f849 	bl	8005b00 <__i2b>
 8006a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	4606      	mov	r6, r0
 8006a74:	dd7c      	ble.n	8006b70 <_dtoa_r+0x8d8>
 8006a76:	461a      	mov	r2, r3
 8006a78:	4601      	mov	r1, r0
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff f8fc 	bl	8005c78 <__pow5mult>
 8006a80:	9b05      	ldr	r3, [sp, #20]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	4606      	mov	r6, r0
 8006a86:	dd76      	ble.n	8006b76 <_dtoa_r+0x8de>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9306      	str	r3, [sp, #24]
 8006a8c:	6933      	ldr	r3, [r6, #16]
 8006a8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a92:	6918      	ldr	r0, [r3, #16]
 8006a94:	f7fe ffe4 	bl	8005a60 <__hi0bits>
 8006a98:	f1c0 0020 	rsb	r0, r0, #32
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	4418      	add	r0, r3
 8006aa0:	f010 001f 	ands.w	r0, r0, #31
 8006aa4:	f000 8086 	beq.w	8006bb4 <_dtoa_r+0x91c>
 8006aa8:	f1c0 0320 	rsb	r3, r0, #32
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	dd7f      	ble.n	8006bb0 <_dtoa_r+0x918>
 8006ab0:	f1c0 001c 	rsb	r0, r0, #28
 8006ab4:	9b04      	ldr	r3, [sp, #16]
 8006ab6:	4403      	add	r3, r0
 8006ab8:	4480      	add	r8, r0
 8006aba:	4405      	add	r5, r0
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	f1b8 0f00 	cmp.w	r8, #0
 8006ac2:	dd05      	ble.n	8006ad0 <_dtoa_r+0x838>
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7ff f92f 	bl	8005d2c <__lshift>
 8006ace:	4683      	mov	fp, r0
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dd05      	ble.n	8006ae2 <_dtoa_r+0x84a>
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff f926 	bl	8005d2c <__lshift>
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d069      	beq.n	8006bbc <_dtoa_r+0x924>
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4658      	mov	r0, fp
 8006aec:	f7ff f98a 	bl	8005e04 <__mcmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	da63      	bge.n	8006bbc <_dtoa_r+0x924>
 8006af4:	2300      	movs	r3, #0
 8006af6:	4659      	mov	r1, fp
 8006af8:	220a      	movs	r2, #10
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7fe ff66 	bl	80059cc <__multadd>
 8006b00:	9b08      	ldr	r3, [sp, #32]
 8006b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b06:	4683      	mov	fp, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 818f 	beq.w	8006e2c <_dtoa_r+0xb94>
 8006b0e:	4639      	mov	r1, r7
 8006b10:	2300      	movs	r3, #0
 8006b12:	220a      	movs	r2, #10
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fe ff59 	bl	80059cc <__multadd>
 8006b1a:	f1b9 0f00 	cmp.w	r9, #0
 8006b1e:	4607      	mov	r7, r0
 8006b20:	f300 808e 	bgt.w	8006c40 <_dtoa_r+0x9a8>
 8006b24:	9b05      	ldr	r3, [sp, #20]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	dc50      	bgt.n	8006bcc <_dtoa_r+0x934>
 8006b2a:	e089      	b.n	8006c40 <_dtoa_r+0x9a8>
 8006b2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b32:	e75d      	b.n	80069f0 <_dtoa_r+0x758>
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	1e5e      	subs	r6, r3, #1
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	42b3      	cmp	r3, r6
 8006b3c:	bfbf      	itttt	lt
 8006b3e:	9b06      	ldrlt	r3, [sp, #24]
 8006b40:	9606      	strlt	r6, [sp, #24]
 8006b42:	1af2      	sublt	r2, r6, r3
 8006b44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b46:	bfb6      	itet	lt
 8006b48:	189b      	addlt	r3, r3, r2
 8006b4a:	1b9e      	subge	r6, r3, r6
 8006b4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b4e:	9b01      	ldr	r3, [sp, #4]
 8006b50:	bfb8      	it	lt
 8006b52:	2600      	movlt	r6, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfb5      	itete	lt
 8006b58:	eba8 0503 	sublt.w	r5, r8, r3
 8006b5c:	9b01      	ldrge	r3, [sp, #4]
 8006b5e:	2300      	movlt	r3, #0
 8006b60:	4645      	movge	r5, r8
 8006b62:	e747      	b.n	80069f4 <_dtoa_r+0x75c>
 8006b64:	9e06      	ldr	r6, [sp, #24]
 8006b66:	9f08      	ldr	r7, [sp, #32]
 8006b68:	4645      	mov	r5, r8
 8006b6a:	e74c      	b.n	8006a06 <_dtoa_r+0x76e>
 8006b6c:	9a06      	ldr	r2, [sp, #24]
 8006b6e:	e775      	b.n	8006a5c <_dtoa_r+0x7c4>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	dc18      	bgt.n	8006ba8 <_dtoa_r+0x910>
 8006b76:	9b02      	ldr	r3, [sp, #8]
 8006b78:	b9b3      	cbnz	r3, 8006ba8 <_dtoa_r+0x910>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b80:	b9a3      	cbnz	r3, 8006bac <_dtoa_r+0x914>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b88:	0d1b      	lsrs	r3, r3, #20
 8006b8a:	051b      	lsls	r3, r3, #20
 8006b8c:	b12b      	cbz	r3, 8006b9a <_dtoa_r+0x902>
 8006b8e:	9b04      	ldr	r3, [sp, #16]
 8006b90:	3301      	adds	r3, #1
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	f108 0801 	add.w	r8, r8, #1
 8006b98:	2301      	movs	r3, #1
 8006b9a:	9306      	str	r3, [sp, #24]
 8006b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f47f af74 	bne.w	8006a8c <_dtoa_r+0x7f4>
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	e779      	b.n	8006a9c <_dtoa_r+0x804>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e7f6      	b.n	8006b9a <_dtoa_r+0x902>
 8006bac:	9b02      	ldr	r3, [sp, #8]
 8006bae:	e7f4      	b.n	8006b9a <_dtoa_r+0x902>
 8006bb0:	d085      	beq.n	8006abe <_dtoa_r+0x826>
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	301c      	adds	r0, #28
 8006bb6:	e77d      	b.n	8006ab4 <_dtoa_r+0x81c>
 8006bb8:	40240000 	.word	0x40240000
 8006bbc:	9b01      	ldr	r3, [sp, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dc38      	bgt.n	8006c34 <_dtoa_r+0x99c>
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	dd35      	ble.n	8006c34 <_dtoa_r+0x99c>
 8006bc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	d10d      	bne.n	8006bee <_dtoa_r+0x956>
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7fe fef7 	bl	80059cc <__multadd>
 8006bde:	4601      	mov	r1, r0
 8006be0:	4606      	mov	r6, r0
 8006be2:	4658      	mov	r0, fp
 8006be4:	f7ff f90e 	bl	8005e04 <__mcmp>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	f73f adbd 	bgt.w	8006768 <_dtoa_r+0x4d0>
 8006bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf0:	9d00      	ldr	r5, [sp, #0]
 8006bf2:	ea6f 0a03 	mvn.w	sl, r3
 8006bf6:	f04f 0800 	mov.w	r8, #0
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7fe fec3 	bl	8005988 <_Bfree>
 8006c02:	2f00      	cmp	r7, #0
 8006c04:	f43f aeb4 	beq.w	8006970 <_dtoa_r+0x6d8>
 8006c08:	f1b8 0f00 	cmp.w	r8, #0
 8006c0c:	d005      	beq.n	8006c1a <_dtoa_r+0x982>
 8006c0e:	45b8      	cmp	r8, r7
 8006c10:	d003      	beq.n	8006c1a <_dtoa_r+0x982>
 8006c12:	4641      	mov	r1, r8
 8006c14:	4620      	mov	r0, r4
 8006c16:	f7fe feb7 	bl	8005988 <_Bfree>
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7fe feb3 	bl	8005988 <_Bfree>
 8006c22:	e6a5      	b.n	8006970 <_dtoa_r+0x6d8>
 8006c24:	2600      	movs	r6, #0
 8006c26:	4637      	mov	r7, r6
 8006c28:	e7e1      	b.n	8006bee <_dtoa_r+0x956>
 8006c2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c30:	4637      	mov	r7, r6
 8006c32:	e599      	b.n	8006768 <_dtoa_r+0x4d0>
 8006c34:	9b08      	ldr	r3, [sp, #32]
 8006c36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80fd 	beq.w	8006e3a <_dtoa_r+0xba2>
 8006c40:	2d00      	cmp	r5, #0
 8006c42:	dd05      	ble.n	8006c50 <_dtoa_r+0x9b8>
 8006c44:	4639      	mov	r1, r7
 8006c46:	462a      	mov	r2, r5
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7ff f86f 	bl	8005d2c <__lshift>
 8006c4e:	4607      	mov	r7, r0
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d05c      	beq.n	8006d10 <_dtoa_r+0xa78>
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7fe fe55 	bl	8005908 <_Balloc>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	b928      	cbnz	r0, 8006c6e <_dtoa_r+0x9d6>
 8006c62:	4b80      	ldr	r3, [pc, #512]	; (8006e64 <_dtoa_r+0xbcc>)
 8006c64:	4602      	mov	r2, r0
 8006c66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c6a:	f7ff bb2e 	b.w	80062ca <_dtoa_r+0x32>
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	3202      	adds	r2, #2
 8006c72:	0092      	lsls	r2, r2, #2
 8006c74:	f107 010c 	add.w	r1, r7, #12
 8006c78:	300c      	adds	r0, #12
 8006c7a:	f000 f913 	bl	8006ea4 <memcpy>
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4629      	mov	r1, r5
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff f852 	bl	8005d2c <__lshift>
 8006c88:	9b00      	ldr	r3, [sp, #0]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	444b      	add	r3, r9
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	46b8      	mov	r8, r7
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	9302      	str	r3, [sp, #8]
 8006caa:	f7ff fa69 	bl	8006180 <quorem>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	3330      	adds	r3, #48	; 0x30
 8006cb2:	9004      	str	r0, [sp, #16]
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	f7ff f8a3 	bl	8005e04 <__mcmp>
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	4681      	mov	r9, r0
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff f8b9 	bl	8005e3c <__mdiff>
 8006cca:	68c2      	ldr	r2, [r0, #12]
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	4605      	mov	r5, r0
 8006cd0:	bb02      	cbnz	r2, 8006d14 <_dtoa_r+0xa7c>
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	4658      	mov	r0, fp
 8006cd6:	f7ff f895 	bl	8005e04 <__mcmp>
 8006cda:	9b08      	ldr	r3, [sp, #32]
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006ce6:	f7fe fe4f 	bl	8005988 <_Bfree>
 8006cea:	9b05      	ldr	r3, [sp, #20]
 8006cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cee:	9d01      	ldr	r5, [sp, #4]
 8006cf0:	ea43 0102 	orr.w	r1, r3, r2
 8006cf4:	9b06      	ldr	r3, [sp, #24]
 8006cf6:	430b      	orrs	r3, r1
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	d10d      	bne.n	8006d18 <_dtoa_r+0xa80>
 8006cfc:	2b39      	cmp	r3, #57	; 0x39
 8006cfe:	d029      	beq.n	8006d54 <_dtoa_r+0xabc>
 8006d00:	f1b9 0f00 	cmp.w	r9, #0
 8006d04:	dd01      	ble.n	8006d0a <_dtoa_r+0xa72>
 8006d06:	9b04      	ldr	r3, [sp, #16]
 8006d08:	3331      	adds	r3, #49	; 0x31
 8006d0a:	9a02      	ldr	r2, [sp, #8]
 8006d0c:	7013      	strb	r3, [r2, #0]
 8006d0e:	e774      	b.n	8006bfa <_dtoa_r+0x962>
 8006d10:	4638      	mov	r0, r7
 8006d12:	e7b9      	b.n	8006c88 <_dtoa_r+0x9f0>
 8006d14:	2201      	movs	r2, #1
 8006d16:	e7e2      	b.n	8006cde <_dtoa_r+0xa46>
 8006d18:	f1b9 0f00 	cmp.w	r9, #0
 8006d1c:	db06      	blt.n	8006d2c <_dtoa_r+0xa94>
 8006d1e:	9905      	ldr	r1, [sp, #20]
 8006d20:	ea41 0909 	orr.w	r9, r1, r9
 8006d24:	9906      	ldr	r1, [sp, #24]
 8006d26:	ea59 0101 	orrs.w	r1, r9, r1
 8006d2a:	d120      	bne.n	8006d6e <_dtoa_r+0xad6>
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	ddec      	ble.n	8006d0a <_dtoa_r+0xa72>
 8006d30:	4659      	mov	r1, fp
 8006d32:	2201      	movs	r2, #1
 8006d34:	4620      	mov	r0, r4
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	f7fe fff8 	bl	8005d2c <__lshift>
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4683      	mov	fp, r0
 8006d40:	f7ff f860 	bl	8005e04 <__mcmp>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	dc02      	bgt.n	8006d50 <_dtoa_r+0xab8>
 8006d4a:	d1de      	bne.n	8006d0a <_dtoa_r+0xa72>
 8006d4c:	07da      	lsls	r2, r3, #31
 8006d4e:	d5dc      	bpl.n	8006d0a <_dtoa_r+0xa72>
 8006d50:	2b39      	cmp	r3, #57	; 0x39
 8006d52:	d1d8      	bne.n	8006d06 <_dtoa_r+0xa6e>
 8006d54:	9a02      	ldr	r2, [sp, #8]
 8006d56:	2339      	movs	r3, #57	; 0x39
 8006d58:	7013      	strb	r3, [r2, #0]
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d64:	2a39      	cmp	r2, #57	; 0x39
 8006d66:	d050      	beq.n	8006e0a <_dtoa_r+0xb72>
 8006d68:	3201      	adds	r2, #1
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e745      	b.n	8006bfa <_dtoa_r+0x962>
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	dd03      	ble.n	8006d7a <_dtoa_r+0xae2>
 8006d72:	2b39      	cmp	r3, #57	; 0x39
 8006d74:	d0ee      	beq.n	8006d54 <_dtoa_r+0xabc>
 8006d76:	3301      	adds	r3, #1
 8006d78:	e7c7      	b.n	8006d0a <_dtoa_r+0xa72>
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	9907      	ldr	r1, [sp, #28]
 8006d7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d82:	428a      	cmp	r2, r1
 8006d84:	d02a      	beq.n	8006ddc <_dtoa_r+0xb44>
 8006d86:	4659      	mov	r1, fp
 8006d88:	2300      	movs	r3, #0
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7fe fe1d 	bl	80059cc <__multadd>
 8006d92:	45b8      	cmp	r8, r7
 8006d94:	4683      	mov	fp, r0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	f04f 020a 	mov.w	r2, #10
 8006d9e:	4641      	mov	r1, r8
 8006da0:	4620      	mov	r0, r4
 8006da2:	d107      	bne.n	8006db4 <_dtoa_r+0xb1c>
 8006da4:	f7fe fe12 	bl	80059cc <__multadd>
 8006da8:	4680      	mov	r8, r0
 8006daa:	4607      	mov	r7, r0
 8006dac:	9b01      	ldr	r3, [sp, #4]
 8006dae:	3301      	adds	r3, #1
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	e775      	b.n	8006ca0 <_dtoa_r+0xa08>
 8006db4:	f7fe fe0a 	bl	80059cc <__multadd>
 8006db8:	4639      	mov	r1, r7
 8006dba:	4680      	mov	r8, r0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	220a      	movs	r2, #10
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7fe fe03 	bl	80059cc <__multadd>
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	e7f0      	b.n	8006dac <_dtoa_r+0xb14>
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	9a00      	ldr	r2, [sp, #0]
 8006dd0:	bfcc      	ite	gt
 8006dd2:	464d      	movgt	r5, r9
 8006dd4:	2501      	movle	r5, #1
 8006dd6:	4415      	add	r5, r2
 8006dd8:	f04f 0800 	mov.w	r8, #0
 8006ddc:	4659      	mov	r1, fp
 8006dde:	2201      	movs	r2, #1
 8006de0:	4620      	mov	r0, r4
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	f7fe ffa2 	bl	8005d2c <__lshift>
 8006de8:	4631      	mov	r1, r6
 8006dea:	4683      	mov	fp, r0
 8006dec:	f7ff f80a 	bl	8005e04 <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	dcb2      	bgt.n	8006d5a <_dtoa_r+0xac2>
 8006df4:	d102      	bne.n	8006dfc <_dtoa_r+0xb64>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	07db      	lsls	r3, r3, #31
 8006dfa:	d4ae      	bmi.n	8006d5a <_dtoa_r+0xac2>
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	461d      	mov	r5, r3
 8006e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e04:	2a30      	cmp	r2, #48	; 0x30
 8006e06:	d0fa      	beq.n	8006dfe <_dtoa_r+0xb66>
 8006e08:	e6f7      	b.n	8006bfa <_dtoa_r+0x962>
 8006e0a:	9a00      	ldr	r2, [sp, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d1a5      	bne.n	8006d5c <_dtoa_r+0xac4>
 8006e10:	f10a 0a01 	add.w	sl, sl, #1
 8006e14:	2331      	movs	r3, #49	; 0x31
 8006e16:	e779      	b.n	8006d0c <_dtoa_r+0xa74>
 8006e18:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <_dtoa_r+0xbd0>)
 8006e1a:	f7ff baaf 	b.w	800637c <_dtoa_r+0xe4>
 8006e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f aa86 	bne.w	8006332 <_dtoa_r+0x9a>
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <_dtoa_r+0xbd4>)
 8006e28:	f7ff baa8 	b.w	800637c <_dtoa_r+0xe4>
 8006e2c:	f1b9 0f00 	cmp.w	r9, #0
 8006e30:	dc03      	bgt.n	8006e3a <_dtoa_r+0xba2>
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	f73f aec9 	bgt.w	8006bcc <_dtoa_r+0x934>
 8006e3a:	9d00      	ldr	r5, [sp, #0]
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4658      	mov	r0, fp
 8006e40:	f7ff f99e 	bl	8006180 <quorem>
 8006e44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e48:	f805 3b01 	strb.w	r3, [r5], #1
 8006e4c:	9a00      	ldr	r2, [sp, #0]
 8006e4e:	1aaa      	subs	r2, r5, r2
 8006e50:	4591      	cmp	r9, r2
 8006e52:	ddba      	ble.n	8006dca <_dtoa_r+0xb32>
 8006e54:	4659      	mov	r1, fp
 8006e56:	2300      	movs	r3, #0
 8006e58:	220a      	movs	r2, #10
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7fe fdb6 	bl	80059cc <__multadd>
 8006e60:	4683      	mov	fp, r0
 8006e62:	e7eb      	b.n	8006e3c <_dtoa_r+0xba4>
 8006e64:	08007dab 	.word	0x08007dab
 8006e68:	08007f05 	.word	0x08007f05
 8006e6c:	08007ef8 	.word	0x08007ef8

08006e70 <fiprintf>:
 8006e70:	b40e      	push	{r1, r2, r3}
 8006e72:	b503      	push	{r0, r1, lr}
 8006e74:	4601      	mov	r1, r0
 8006e76:	ab03      	add	r3, sp, #12
 8006e78:	4805      	ldr	r0, [pc, #20]	; (8006e90 <fiprintf+0x20>)
 8006e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7e:	6800      	ldr	r0, [r0, #0]
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	f000 f8a3 	bl	8006fcc <_vfiprintf_r>
 8006e86:	b002      	add	sp, #8
 8006e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e8c:	b003      	add	sp, #12
 8006e8e:	4770      	bx	lr
 8006e90:	20000018 	.word	0x20000018

08006e94 <malloc>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <malloc+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f7ff b8e1 	b.w	8006060 <_malloc_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000018 	.word	0x20000018

08006ea4 <memcpy>:
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4291      	cmp	r1, r2
 8006ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eac:	d100      	bne.n	8006eb0 <memcpy+0xc>
 8006eae:	4770      	bx	lr
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	d1f9      	bne.n	8006eb2 <memcpy+0xe>
 8006ebe:	bd10      	pop	{r4, pc}

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	; (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f000 bdc7 	b.w	8007a54 <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	200001a8 	.word	0x200001a8

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	; (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f000 bdc2 	b.w	8007a56 <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	200001a8 	.word	0x200001a8

08006ed8 <_free_r>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	2900      	cmp	r1, #0
 8006edc:	d048      	beq.n	8006f70 <_free_r+0x98>
 8006ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ee2:	9001      	str	r0, [sp, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eea:	bfb8      	it	lt
 8006eec:	18e4      	addlt	r4, r4, r3
 8006eee:	f7ff ffe7 	bl	8006ec0 <__malloc_lock>
 8006ef2:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <_free_r+0x9c>)
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	4615      	mov	r5, r2
 8006efa:	b933      	cbnz	r3, 8006f0a <_free_r+0x32>
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	6014      	str	r4, [r2, #0]
 8006f00:	b003      	add	sp, #12
 8006f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f06:	f7ff bfe1 	b.w	8006ecc <__malloc_unlock>
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	d90b      	bls.n	8006f26 <_free_r+0x4e>
 8006f0e:	6821      	ldr	r1, [r4, #0]
 8006f10:	1862      	adds	r2, r4, r1
 8006f12:	4293      	cmp	r3, r2
 8006f14:	bf04      	itt	eq
 8006f16:	681a      	ldreq	r2, [r3, #0]
 8006f18:	685b      	ldreq	r3, [r3, #4]
 8006f1a:	6063      	str	r3, [r4, #4]
 8006f1c:	bf04      	itt	eq
 8006f1e:	1852      	addeq	r2, r2, r1
 8006f20:	6022      	streq	r2, [r4, #0]
 8006f22:	602c      	str	r4, [r5, #0]
 8006f24:	e7ec      	b.n	8006f00 <_free_r+0x28>
 8006f26:	461a      	mov	r2, r3
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	b10b      	cbz	r3, 8006f30 <_free_r+0x58>
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d9fa      	bls.n	8006f26 <_free_r+0x4e>
 8006f30:	6811      	ldr	r1, [r2, #0]
 8006f32:	1855      	adds	r5, r2, r1
 8006f34:	42a5      	cmp	r5, r4
 8006f36:	d10b      	bne.n	8006f50 <_free_r+0x78>
 8006f38:	6824      	ldr	r4, [r4, #0]
 8006f3a:	4421      	add	r1, r4
 8006f3c:	1854      	adds	r4, r2, r1
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	6011      	str	r1, [r2, #0]
 8006f42:	d1dd      	bne.n	8006f00 <_free_r+0x28>
 8006f44:	681c      	ldr	r4, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	6053      	str	r3, [r2, #4]
 8006f4a:	4421      	add	r1, r4
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	e7d7      	b.n	8006f00 <_free_r+0x28>
 8006f50:	d902      	bls.n	8006f58 <_free_r+0x80>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6003      	str	r3, [r0, #0]
 8006f56:	e7d3      	b.n	8006f00 <_free_r+0x28>
 8006f58:	6825      	ldr	r5, [r4, #0]
 8006f5a:	1961      	adds	r1, r4, r5
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	bf04      	itt	eq
 8006f60:	6819      	ldreq	r1, [r3, #0]
 8006f62:	685b      	ldreq	r3, [r3, #4]
 8006f64:	6063      	str	r3, [r4, #4]
 8006f66:	bf04      	itt	eq
 8006f68:	1949      	addeq	r1, r1, r5
 8006f6a:	6021      	streq	r1, [r4, #0]
 8006f6c:	6054      	str	r4, [r2, #4]
 8006f6e:	e7c7      	b.n	8006f00 <_free_r+0x28>
 8006f70:	b003      	add	sp, #12
 8006f72:	bd30      	pop	{r4, r5, pc}
 8006f74:	200000a4 	.word	0x200000a4

08006f78 <__sfputc_r>:
 8006f78:	6893      	ldr	r3, [r2, #8]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	b410      	push	{r4}
 8006f80:	6093      	str	r3, [r2, #8]
 8006f82:	da08      	bge.n	8006f96 <__sfputc_r+0x1e>
 8006f84:	6994      	ldr	r4, [r2, #24]
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	db01      	blt.n	8006f8e <__sfputc_r+0x16>
 8006f8a:	290a      	cmp	r1, #10
 8006f8c:	d103      	bne.n	8006f96 <__sfputc_r+0x1e>
 8006f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f92:	f000 badf 	b.w	8007554 <__swbuf_r>
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	1c58      	adds	r0, r3, #1
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	7019      	strb	r1, [r3, #0]
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <__sfputs_r>:
 8006fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	4614      	mov	r4, r2
 8006fae:	18d5      	adds	r5, r2, r3
 8006fb0:	42ac      	cmp	r4, r5
 8006fb2:	d101      	bne.n	8006fb8 <__sfputs_r+0x12>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e007      	b.n	8006fc8 <__sfputs_r+0x22>
 8006fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbc:	463a      	mov	r2, r7
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ffda 	bl	8006f78 <__sfputc_r>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d1f3      	bne.n	8006fb0 <__sfputs_r+0xa>
 8006fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fcc <_vfiprintf_r>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	b09d      	sub	sp, #116	; 0x74
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	4698      	mov	r8, r3
 8006fd8:	4606      	mov	r6, r0
 8006fda:	b118      	cbz	r0, 8006fe4 <_vfiprintf_r+0x18>
 8006fdc:	6983      	ldr	r3, [r0, #24]
 8006fde:	b90b      	cbnz	r3, 8006fe4 <_vfiprintf_r+0x18>
 8006fe0:	f000 fc9a 	bl	8007918 <__sinit>
 8006fe4:	4b89      	ldr	r3, [pc, #548]	; (800720c <_vfiprintf_r+0x240>)
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	d11b      	bne.n	8007022 <_vfiprintf_r+0x56>
 8006fea:	6875      	ldr	r5, [r6, #4]
 8006fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fee:	07d9      	lsls	r1, r3, #31
 8006ff0:	d405      	bmi.n	8006ffe <_vfiprintf_r+0x32>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	059a      	lsls	r2, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_vfiprintf_r+0x32>
 8006ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffa:	f000 fd2b 	bl	8007a54 <__retarget_lock_acquire_recursive>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	071b      	lsls	r3, r3, #28
 8007002:	d501      	bpl.n	8007008 <_vfiprintf_r+0x3c>
 8007004:	692b      	ldr	r3, [r5, #16]
 8007006:	b9eb      	cbnz	r3, 8007044 <_vfiprintf_r+0x78>
 8007008:	4629      	mov	r1, r5
 800700a:	4630      	mov	r0, r6
 800700c:	f000 faf4 	bl	80075f8 <__swsetup_r>
 8007010:	b1c0      	cbz	r0, 8007044 <_vfiprintf_r+0x78>
 8007012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007014:	07dc      	lsls	r4, r3, #31
 8007016:	d50e      	bpl.n	8007036 <_vfiprintf_r+0x6a>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b01d      	add	sp, #116	; 0x74
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <_vfiprintf_r+0x244>)
 8007024:	429d      	cmp	r5, r3
 8007026:	d101      	bne.n	800702c <_vfiprintf_r+0x60>
 8007028:	68b5      	ldr	r5, [r6, #8]
 800702a:	e7df      	b.n	8006fec <_vfiprintf_r+0x20>
 800702c:	4b79      	ldr	r3, [pc, #484]	; (8007214 <_vfiprintf_r+0x248>)
 800702e:	429d      	cmp	r5, r3
 8007030:	bf08      	it	eq
 8007032:	68f5      	ldreq	r5, [r6, #12]
 8007034:	e7da      	b.n	8006fec <_vfiprintf_r+0x20>
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	0598      	lsls	r0, r3, #22
 800703a:	d4ed      	bmi.n	8007018 <_vfiprintf_r+0x4c>
 800703c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800703e:	f000 fd0a 	bl	8007a56 <__retarget_lock_release_recursive>
 8007042:	e7e9      	b.n	8007018 <_vfiprintf_r+0x4c>
 8007044:	2300      	movs	r3, #0
 8007046:	9309      	str	r3, [sp, #36]	; 0x24
 8007048:	2320      	movs	r3, #32
 800704a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800704e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007052:	2330      	movs	r3, #48	; 0x30
 8007054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007218 <_vfiprintf_r+0x24c>
 8007058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800705c:	f04f 0901 	mov.w	r9, #1
 8007060:	4623      	mov	r3, r4
 8007062:	469a      	mov	sl, r3
 8007064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007068:	b10a      	cbz	r2, 800706e <_vfiprintf_r+0xa2>
 800706a:	2a25      	cmp	r2, #37	; 0x25
 800706c:	d1f9      	bne.n	8007062 <_vfiprintf_r+0x96>
 800706e:	ebba 0b04 	subs.w	fp, sl, r4
 8007072:	d00b      	beq.n	800708c <_vfiprintf_r+0xc0>
 8007074:	465b      	mov	r3, fp
 8007076:	4622      	mov	r2, r4
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ff93 	bl	8006fa6 <__sfputs_r>
 8007080:	3001      	adds	r0, #1
 8007082:	f000 80aa 	beq.w	80071da <_vfiprintf_r+0x20e>
 8007086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007088:	445a      	add	r2, fp
 800708a:	9209      	str	r2, [sp, #36]	; 0x24
 800708c:	f89a 3000 	ldrb.w	r3, [sl]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a2 	beq.w	80071da <_vfiprintf_r+0x20e>
 8007096:	2300      	movs	r3, #0
 8007098:	f04f 32ff 	mov.w	r2, #4294967295
 800709c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a0:	f10a 0a01 	add.w	sl, sl, #1
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	9307      	str	r3, [sp, #28]
 80070a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ac:	931a      	str	r3, [sp, #104]	; 0x68
 80070ae:	4654      	mov	r4, sl
 80070b0:	2205      	movs	r2, #5
 80070b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b6:	4858      	ldr	r0, [pc, #352]	; (8007218 <_vfiprintf_r+0x24c>)
 80070b8:	f7f9 f8aa 	bl	8000210 <memchr>
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	b9d8      	cbnz	r0, 80070f8 <_vfiprintf_r+0x12c>
 80070c0:	06d1      	lsls	r1, r2, #27
 80070c2:	bf44      	itt	mi
 80070c4:	2320      	movmi	r3, #32
 80070c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ca:	0713      	lsls	r3, r2, #28
 80070cc:	bf44      	itt	mi
 80070ce:	232b      	movmi	r3, #43	; 0x2b
 80070d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b2a      	cmp	r3, #42	; 0x2a
 80070da:	d015      	beq.n	8007108 <_vfiprintf_r+0x13c>
 80070dc:	9a07      	ldr	r2, [sp, #28]
 80070de:	4654      	mov	r4, sl
 80070e0:	2000      	movs	r0, #0
 80070e2:	f04f 0c0a 	mov.w	ip, #10
 80070e6:	4621      	mov	r1, r4
 80070e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ec:	3b30      	subs	r3, #48	; 0x30
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d94e      	bls.n	8007190 <_vfiprintf_r+0x1c4>
 80070f2:	b1b0      	cbz	r0, 8007122 <_vfiprintf_r+0x156>
 80070f4:	9207      	str	r2, [sp, #28]
 80070f6:	e014      	b.n	8007122 <_vfiprintf_r+0x156>
 80070f8:	eba0 0308 	sub.w	r3, r0, r8
 80070fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007100:	4313      	orrs	r3, r2
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	46a2      	mov	sl, r4
 8007106:	e7d2      	b.n	80070ae <_vfiprintf_r+0xe2>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	1d19      	adds	r1, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9103      	str	r1, [sp, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfbb      	ittet	lt
 8007114:	425b      	neglt	r3, r3
 8007116:	f042 0202 	orrlt.w	r2, r2, #2
 800711a:	9307      	strge	r3, [sp, #28]
 800711c:	9307      	strlt	r3, [sp, #28]
 800711e:	bfb8      	it	lt
 8007120:	9204      	strlt	r2, [sp, #16]
 8007122:	7823      	ldrb	r3, [r4, #0]
 8007124:	2b2e      	cmp	r3, #46	; 0x2e
 8007126:	d10c      	bne.n	8007142 <_vfiprintf_r+0x176>
 8007128:	7863      	ldrb	r3, [r4, #1]
 800712a:	2b2a      	cmp	r3, #42	; 0x2a
 800712c:	d135      	bne.n	800719a <_vfiprintf_r+0x1ce>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9203      	str	r2, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfb8      	it	lt
 800713a:	f04f 33ff 	movlt.w	r3, #4294967295
 800713e:	3402      	adds	r4, #2
 8007140:	9305      	str	r3, [sp, #20]
 8007142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007228 <_vfiprintf_r+0x25c>
 8007146:	7821      	ldrb	r1, [r4, #0]
 8007148:	2203      	movs	r2, #3
 800714a:	4650      	mov	r0, sl
 800714c:	f7f9 f860 	bl	8000210 <memchr>
 8007150:	b140      	cbz	r0, 8007164 <_vfiprintf_r+0x198>
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	eba0 000a 	sub.w	r0, r0, sl
 8007158:	fa03 f000 	lsl.w	r0, r3, r0
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	4303      	orrs	r3, r0
 8007160:	3401      	adds	r4, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	482c      	ldr	r0, [pc, #176]	; (800721c <_vfiprintf_r+0x250>)
 800716a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800716e:	2206      	movs	r2, #6
 8007170:	f7f9 f84e 	bl	8000210 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d03f      	beq.n	80071f8 <_vfiprintf_r+0x22c>
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <_vfiprintf_r+0x254>)
 800717a:	bb1b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x1f8>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	3307      	adds	r3, #7
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	3308      	adds	r3, #8
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	443b      	add	r3, r7
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	e767      	b.n	8007060 <_vfiprintf_r+0x94>
 8007190:	fb0c 3202 	mla	r2, ip, r2, r3
 8007194:	460c      	mov	r4, r1
 8007196:	2001      	movs	r0, #1
 8007198:	e7a5      	b.n	80070e6 <_vfiprintf_r+0x11a>
 800719a:	2300      	movs	r3, #0
 800719c:	3401      	adds	r4, #1
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	4620      	mov	r0, r4
 80071a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	2a09      	cmp	r2, #9
 80071b0:	d903      	bls.n	80071ba <_vfiprintf_r+0x1ee>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c5      	beq.n	8007142 <_vfiprintf_r+0x176>
 80071b6:	9105      	str	r1, [sp, #20]
 80071b8:	e7c3      	b.n	8007142 <_vfiprintf_r+0x176>
 80071ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80071be:	4604      	mov	r4, r0
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7f0      	b.n	80071a6 <_vfiprintf_r+0x1da>
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <_vfiprintf_r+0x258>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4630      	mov	r0, r6
 80071d0:	f3af 8000 	nop.w
 80071d4:	4607      	mov	r7, r0
 80071d6:	1c78      	adds	r0, r7, #1
 80071d8:	d1d6      	bne.n	8007188 <_vfiprintf_r+0x1bc>
 80071da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071dc:	07d9      	lsls	r1, r3, #31
 80071de:	d405      	bmi.n	80071ec <_vfiprintf_r+0x220>
 80071e0:	89ab      	ldrh	r3, [r5, #12]
 80071e2:	059a      	lsls	r2, r3, #22
 80071e4:	d402      	bmi.n	80071ec <_vfiprintf_r+0x220>
 80071e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e8:	f000 fc35 	bl	8007a56 <__retarget_lock_release_recursive>
 80071ec:	89ab      	ldrh	r3, [r5, #12]
 80071ee:	065b      	lsls	r3, r3, #25
 80071f0:	f53f af12 	bmi.w	8007018 <_vfiprintf_r+0x4c>
 80071f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f6:	e711      	b.n	800701c <_vfiprintf_r+0x50>
 80071f8:	ab03      	add	r3, sp, #12
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	462a      	mov	r2, r5
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <_vfiprintf_r+0x258>)
 8007200:	a904      	add	r1, sp, #16
 8007202:	4630      	mov	r0, r6
 8007204:	f000 f880 	bl	8007308 <_printf_i>
 8007208:	e7e4      	b.n	80071d4 <_vfiprintf_r+0x208>
 800720a:	bf00      	nop
 800720c:	08007fbc 	.word	0x08007fbc
 8007210:	08007fdc 	.word	0x08007fdc
 8007214:	08007f9c 	.word	0x08007f9c
 8007218:	08007f66 	.word	0x08007f66
 800721c:	08007f70 	.word	0x08007f70
 8007220:	00000000 	.word	0x00000000
 8007224:	08006fa7 	.word	0x08006fa7
 8007228:	08007f6c 	.word	0x08007f6c

0800722c <_printf_common>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	4616      	mov	r6, r2
 8007232:	4699      	mov	r9, r3
 8007234:	688a      	ldr	r2, [r1, #8]
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800723c:	4293      	cmp	r3, r2
 800723e:	bfb8      	it	lt
 8007240:	4613      	movlt	r3, r2
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007248:	4607      	mov	r7, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b10a      	cbz	r2, 8007252 <_printf_common+0x26>
 800724e:	3301      	adds	r3, #1
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	0699      	lsls	r1, r3, #26
 8007256:	bf42      	ittt	mi
 8007258:	6833      	ldrmi	r3, [r6, #0]
 800725a:	3302      	addmi	r3, #2
 800725c:	6033      	strmi	r3, [r6, #0]
 800725e:	6825      	ldr	r5, [r4, #0]
 8007260:	f015 0506 	ands.w	r5, r5, #6
 8007264:	d106      	bne.n	8007274 <_printf_common+0x48>
 8007266:	f104 0a19 	add.w	sl, r4, #25
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	6832      	ldr	r2, [r6, #0]
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	42ab      	cmp	r3, r5
 8007272:	dc26      	bgt.n	80072c2 <_printf_common+0x96>
 8007274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007278:	1e13      	subs	r3, r2, #0
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	2301      	movne	r3, #1
 8007280:	0692      	lsls	r2, r2, #26
 8007282:	d42b      	bmi.n	80072dc <_printf_common+0xb0>
 8007284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007288:	4649      	mov	r1, r9
 800728a:	4638      	mov	r0, r7
 800728c:	47c0      	blx	r8
 800728e:	3001      	adds	r0, #1
 8007290:	d01e      	beq.n	80072d0 <_printf_common+0xa4>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	68e5      	ldr	r5, [r4, #12]
 8007296:	6832      	ldr	r2, [r6, #0]
 8007298:	f003 0306 	and.w	r3, r3, #6
 800729c:	2b04      	cmp	r3, #4
 800729e:	bf08      	it	eq
 80072a0:	1aad      	subeq	r5, r5, r2
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	bf0c      	ite	eq
 80072a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ac:	2500      	movne	r5, #0
 80072ae:	4293      	cmp	r3, r2
 80072b0:	bfc4      	itt	gt
 80072b2:	1a9b      	subgt	r3, r3, r2
 80072b4:	18ed      	addgt	r5, r5, r3
 80072b6:	2600      	movs	r6, #0
 80072b8:	341a      	adds	r4, #26
 80072ba:	42b5      	cmp	r5, r6
 80072bc:	d11a      	bne.n	80072f4 <_printf_common+0xc8>
 80072be:	2000      	movs	r0, #0
 80072c0:	e008      	b.n	80072d4 <_printf_common+0xa8>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4652      	mov	r2, sl
 80072c6:	4649      	mov	r1, r9
 80072c8:	4638      	mov	r0, r7
 80072ca:	47c0      	blx	r8
 80072cc:	3001      	adds	r0, #1
 80072ce:	d103      	bne.n	80072d8 <_printf_common+0xac>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d8:	3501      	adds	r5, #1
 80072da:	e7c6      	b.n	800726a <_printf_common+0x3e>
 80072dc:	18e1      	adds	r1, r4, r3
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	2030      	movs	r0, #48	; 0x30
 80072e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072e6:	4422      	add	r2, r4
 80072e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f0:	3302      	adds	r3, #2
 80072f2:	e7c7      	b.n	8007284 <_printf_common+0x58>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4622      	mov	r2, r4
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d0e6      	beq.n	80072d0 <_printf_common+0xa4>
 8007302:	3601      	adds	r6, #1
 8007304:	e7d9      	b.n	80072ba <_printf_common+0x8e>
	...

08007308 <_printf_i>:
 8007308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	460c      	mov	r4, r1
 800730e:	4691      	mov	r9, r2
 8007310:	7e27      	ldrb	r7, [r4, #24]
 8007312:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007314:	2f78      	cmp	r7, #120	; 0x78
 8007316:	4680      	mov	r8, r0
 8007318:	469a      	mov	sl, r3
 800731a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800731e:	d807      	bhi.n	8007330 <_printf_i+0x28>
 8007320:	2f62      	cmp	r7, #98	; 0x62
 8007322:	d80a      	bhi.n	800733a <_printf_i+0x32>
 8007324:	2f00      	cmp	r7, #0
 8007326:	f000 80d8 	beq.w	80074da <_printf_i+0x1d2>
 800732a:	2f58      	cmp	r7, #88	; 0x58
 800732c:	f000 80a3 	beq.w	8007476 <_printf_i+0x16e>
 8007330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007338:	e03a      	b.n	80073b0 <_printf_i+0xa8>
 800733a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800733e:	2b15      	cmp	r3, #21
 8007340:	d8f6      	bhi.n	8007330 <_printf_i+0x28>
 8007342:	a001      	add	r0, pc, #4	; (adr r0, 8007348 <_printf_i+0x40>)
 8007344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073b5 	.word	0x080073b5
 8007350:	08007331 	.word	0x08007331
 8007354:	08007331 	.word	0x08007331
 8007358:	08007331 	.word	0x08007331
 800735c:	08007331 	.word	0x08007331
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007331 	.word	0x08007331
 8007368:	08007331 	.word	0x08007331
 800736c:	08007331 	.word	0x08007331
 8007370:	08007331 	.word	0x08007331
 8007374:	080074c1 	.word	0x080074c1
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080074a3 	.word	0x080074a3
 8007380:	08007331 	.word	0x08007331
 8007384:	08007331 	.word	0x08007331
 8007388:	080074e3 	.word	0x080074e3
 800738c:	08007331 	.word	0x08007331
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007331 	.word	0x08007331
 8007398:	08007331 	.word	0x08007331
 800739c:	080074ab 	.word	0x080074ab
 80073a0:	680b      	ldr	r3, [r1, #0]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	600a      	str	r2, [r1, #0]
 80073a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0a3      	b.n	80074fc <_printf_i+0x1f4>
 80073b4:	6825      	ldr	r5, [r4, #0]
 80073b6:	6808      	ldr	r0, [r1, #0]
 80073b8:	062e      	lsls	r6, r5, #24
 80073ba:	f100 0304 	add.w	r3, r0, #4
 80073be:	d50a      	bpl.n	80073d6 <_printf_i+0xce>
 80073c0:	6805      	ldr	r5, [r0, #0]
 80073c2:	600b      	str	r3, [r1, #0]
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	da03      	bge.n	80073d0 <_printf_i+0xc8>
 80073c8:	232d      	movs	r3, #45	; 0x2d
 80073ca:	426d      	negs	r5, r5
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d0:	485e      	ldr	r0, [pc, #376]	; (800754c <_printf_i+0x244>)
 80073d2:	230a      	movs	r3, #10
 80073d4:	e019      	b.n	800740a <_printf_i+0x102>
 80073d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073da:	6805      	ldr	r5, [r0, #0]
 80073dc:	600b      	str	r3, [r1, #0]
 80073de:	bf18      	it	ne
 80073e0:	b22d      	sxthne	r5, r5
 80073e2:	e7ef      	b.n	80073c4 <_printf_i+0xbc>
 80073e4:	680b      	ldr	r3, [r1, #0]
 80073e6:	6825      	ldr	r5, [r4, #0]
 80073e8:	1d18      	adds	r0, r3, #4
 80073ea:	6008      	str	r0, [r1, #0]
 80073ec:	0628      	lsls	r0, r5, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0xec>
 80073f0:	681d      	ldr	r5, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0xf2>
 80073f4:	0669      	lsls	r1, r5, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0xe8>
 80073f8:	881d      	ldrh	r5, [r3, #0]
 80073fa:	4854      	ldr	r0, [pc, #336]	; (800754c <_printf_i+0x244>)
 80073fc:	2f6f      	cmp	r7, #111	; 0x6f
 80073fe:	bf0c      	ite	eq
 8007400:	2308      	moveq	r3, #8
 8007402:	230a      	movne	r3, #10
 8007404:	2100      	movs	r1, #0
 8007406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740a:	6866      	ldr	r6, [r4, #4]
 800740c:	60a6      	str	r6, [r4, #8]
 800740e:	2e00      	cmp	r6, #0
 8007410:	bfa2      	ittt	ge
 8007412:	6821      	ldrge	r1, [r4, #0]
 8007414:	f021 0104 	bicge.w	r1, r1, #4
 8007418:	6021      	strge	r1, [r4, #0]
 800741a:	b90d      	cbnz	r5, 8007420 <_printf_i+0x118>
 800741c:	2e00      	cmp	r6, #0
 800741e:	d04d      	beq.n	80074bc <_printf_i+0x1b4>
 8007420:	4616      	mov	r6, r2
 8007422:	fbb5 f1f3 	udiv	r1, r5, r3
 8007426:	fb03 5711 	mls	r7, r3, r1, r5
 800742a:	5dc7      	ldrb	r7, [r0, r7]
 800742c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007430:	462f      	mov	r7, r5
 8007432:	42bb      	cmp	r3, r7
 8007434:	460d      	mov	r5, r1
 8007436:	d9f4      	bls.n	8007422 <_printf_i+0x11a>
 8007438:	2b08      	cmp	r3, #8
 800743a:	d10b      	bne.n	8007454 <_printf_i+0x14c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07df      	lsls	r7, r3, #31
 8007440:	d508      	bpl.n	8007454 <_printf_i+0x14c>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	bfde      	ittt	le
 800744a:	2330      	movle	r3, #48	; 0x30
 800744c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007450:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007454:	1b92      	subs	r2, r2, r6
 8007456:	6122      	str	r2, [r4, #16]
 8007458:	f8cd a000 	str.w	sl, [sp]
 800745c:	464b      	mov	r3, r9
 800745e:	aa03      	add	r2, sp, #12
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fee2 	bl	800722c <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	d14c      	bne.n	8007506 <_printf_i+0x1fe>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	b004      	add	sp, #16
 8007472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007476:	4835      	ldr	r0, [pc, #212]	; (800754c <_printf_i+0x244>)
 8007478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	680e      	ldr	r6, [r1, #0]
 8007480:	061f      	lsls	r7, r3, #24
 8007482:	f856 5b04 	ldr.w	r5, [r6], #4
 8007486:	600e      	str	r6, [r1, #0]
 8007488:	d514      	bpl.n	80074b4 <_printf_i+0x1ac>
 800748a:	07d9      	lsls	r1, r3, #31
 800748c:	bf44      	itt	mi
 800748e:	f043 0320 	orrmi.w	r3, r3, #32
 8007492:	6023      	strmi	r3, [r4, #0]
 8007494:	b91d      	cbnz	r5, 800749e <_printf_i+0x196>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f023 0320 	bic.w	r3, r3, #32
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	2310      	movs	r3, #16
 80074a0:	e7b0      	b.n	8007404 <_printf_i+0xfc>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f043 0320 	orr.w	r3, r3, #32
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	2378      	movs	r3, #120	; 0x78
 80074ac:	4828      	ldr	r0, [pc, #160]	; (8007550 <_printf_i+0x248>)
 80074ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b2:	e7e3      	b.n	800747c <_printf_i+0x174>
 80074b4:	065e      	lsls	r6, r3, #25
 80074b6:	bf48      	it	mi
 80074b8:	b2ad      	uxthmi	r5, r5
 80074ba:	e7e6      	b.n	800748a <_printf_i+0x182>
 80074bc:	4616      	mov	r6, r2
 80074be:	e7bb      	b.n	8007438 <_printf_i+0x130>
 80074c0:	680b      	ldr	r3, [r1, #0]
 80074c2:	6826      	ldr	r6, [r4, #0]
 80074c4:	6960      	ldr	r0, [r4, #20]
 80074c6:	1d1d      	adds	r5, r3, #4
 80074c8:	600d      	str	r5, [r1, #0]
 80074ca:	0635      	lsls	r5, r6, #24
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0x1cc>
 80074d0:	6018      	str	r0, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0x1d2>
 80074d4:	0671      	lsls	r1, r6, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0x1c8>
 80074d8:	8018      	strh	r0, [r3, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	4616      	mov	r6, r2
 80074e0:	e7ba      	b.n	8007458 <_printf_i+0x150>
 80074e2:	680b      	ldr	r3, [r1, #0]
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	600a      	str	r2, [r1, #0]
 80074e8:	681e      	ldr	r6, [r3, #0]
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	f7f8 fe8e 	bl	8000210 <memchr>
 80074f4:	b108      	cbz	r0, 80074fa <_printf_i+0x1f2>
 80074f6:	1b80      	subs	r0, r0, r6
 80074f8:	6060      	str	r0, [r4, #4]
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	2300      	movs	r3, #0
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007504:	e7a8      	b.n	8007458 <_printf_i+0x150>
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	4632      	mov	r2, r6
 800750a:	4649      	mov	r1, r9
 800750c:	4640      	mov	r0, r8
 800750e:	47d0      	blx	sl
 8007510:	3001      	adds	r0, #1
 8007512:	d0ab      	beq.n	800746c <_printf_i+0x164>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	079b      	lsls	r3, r3, #30
 8007518:	d413      	bmi.n	8007542 <_printf_i+0x23a>
 800751a:	68e0      	ldr	r0, [r4, #12]
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	4298      	cmp	r0, r3
 8007520:	bfb8      	it	lt
 8007522:	4618      	movlt	r0, r3
 8007524:	e7a4      	b.n	8007470 <_printf_i+0x168>
 8007526:	2301      	movs	r3, #1
 8007528:	4632      	mov	r2, r6
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d09b      	beq.n	800746c <_printf_i+0x164>
 8007534:	3501      	adds	r5, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	42ab      	cmp	r3, r5
 800753e:	dcf2      	bgt.n	8007526 <_printf_i+0x21e>
 8007540:	e7eb      	b.n	800751a <_printf_i+0x212>
 8007542:	2500      	movs	r5, #0
 8007544:	f104 0619 	add.w	r6, r4, #25
 8007548:	e7f5      	b.n	8007536 <_printf_i+0x22e>
 800754a:	bf00      	nop
 800754c:	08007f77 	.word	0x08007f77
 8007550:	08007f88 	.word	0x08007f88

08007554 <__swbuf_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	460e      	mov	r6, r1
 8007558:	4614      	mov	r4, r2
 800755a:	4605      	mov	r5, r0
 800755c:	b118      	cbz	r0, 8007566 <__swbuf_r+0x12>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <__swbuf_r+0x12>
 8007562:	f000 f9d9 	bl	8007918 <__sinit>
 8007566:	4b21      	ldr	r3, [pc, #132]	; (80075ec <__swbuf_r+0x98>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d12b      	bne.n	80075c4 <__swbuf_r+0x70>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	69a3      	ldr	r3, [r4, #24]
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	071a      	lsls	r2, r3, #28
 8007576:	d52f      	bpl.n	80075d8 <__swbuf_r+0x84>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	b36b      	cbz	r3, 80075d8 <__swbuf_r+0x84>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	1ac0      	subs	r0, r0, r3
 8007582:	6963      	ldr	r3, [r4, #20]
 8007584:	b2f6      	uxtb	r6, r6
 8007586:	4283      	cmp	r3, r0
 8007588:	4637      	mov	r7, r6
 800758a:	dc04      	bgt.n	8007596 <__swbuf_r+0x42>
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f92e 	bl	80077f0 <_fflush_r>
 8007594:	bb30      	cbnz	r0, 80075e4 <__swbuf_r+0x90>
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	3b01      	subs	r3, #1
 800759a:	60a3      	str	r3, [r4, #8]
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	6022      	str	r2, [r4, #0]
 80075a2:	701e      	strb	r6, [r3, #0]
 80075a4:	6963      	ldr	r3, [r4, #20]
 80075a6:	3001      	adds	r0, #1
 80075a8:	4283      	cmp	r3, r0
 80075aa:	d004      	beq.n	80075b6 <__swbuf_r+0x62>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	07db      	lsls	r3, r3, #31
 80075b0:	d506      	bpl.n	80075c0 <__swbuf_r+0x6c>
 80075b2:	2e0a      	cmp	r6, #10
 80075b4:	d104      	bne.n	80075c0 <__swbuf_r+0x6c>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f919 	bl	80077f0 <_fflush_r>
 80075be:	b988      	cbnz	r0, 80075e4 <__swbuf_r+0x90>
 80075c0:	4638      	mov	r0, r7
 80075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <__swbuf_r+0x9c>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d101      	bne.n	80075ce <__swbuf_r+0x7a>
 80075ca:	68ac      	ldr	r4, [r5, #8]
 80075cc:	e7cf      	b.n	800756e <__swbuf_r+0x1a>
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <__swbuf_r+0xa0>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	bf08      	it	eq
 80075d4:	68ec      	ldreq	r4, [r5, #12]
 80075d6:	e7ca      	b.n	800756e <__swbuf_r+0x1a>
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 f80c 	bl	80075f8 <__swsetup_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0cb      	beq.n	800757c <__swbuf_r+0x28>
 80075e4:	f04f 37ff 	mov.w	r7, #4294967295
 80075e8:	e7ea      	b.n	80075c0 <__swbuf_r+0x6c>
 80075ea:	bf00      	nop
 80075ec:	08007fbc 	.word	0x08007fbc
 80075f0:	08007fdc 	.word	0x08007fdc
 80075f4:	08007f9c 	.word	0x08007f9c

080075f8 <__swsetup_r>:
 80075f8:	4b32      	ldr	r3, [pc, #200]	; (80076c4 <__swsetup_r+0xcc>)
 80075fa:	b570      	push	{r4, r5, r6, lr}
 80075fc:	681d      	ldr	r5, [r3, #0]
 80075fe:	4606      	mov	r6, r0
 8007600:	460c      	mov	r4, r1
 8007602:	b125      	cbz	r5, 800760e <__swsetup_r+0x16>
 8007604:	69ab      	ldr	r3, [r5, #24]
 8007606:	b913      	cbnz	r3, 800760e <__swsetup_r+0x16>
 8007608:	4628      	mov	r0, r5
 800760a:	f000 f985 	bl	8007918 <__sinit>
 800760e:	4b2e      	ldr	r3, [pc, #184]	; (80076c8 <__swsetup_r+0xd0>)
 8007610:	429c      	cmp	r4, r3
 8007612:	d10f      	bne.n	8007634 <__swsetup_r+0x3c>
 8007614:	686c      	ldr	r4, [r5, #4]
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800761c:	0719      	lsls	r1, r3, #28
 800761e:	d42c      	bmi.n	800767a <__swsetup_r+0x82>
 8007620:	06dd      	lsls	r5, r3, #27
 8007622:	d411      	bmi.n	8007648 <__swsetup_r+0x50>
 8007624:	2309      	movs	r3, #9
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	f04f 30ff 	mov.w	r0, #4294967295
 8007632:	e03e      	b.n	80076b2 <__swsetup_r+0xba>
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <__swsetup_r+0xd4>)
 8007636:	429c      	cmp	r4, r3
 8007638:	d101      	bne.n	800763e <__swsetup_r+0x46>
 800763a:	68ac      	ldr	r4, [r5, #8]
 800763c:	e7eb      	b.n	8007616 <__swsetup_r+0x1e>
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <__swsetup_r+0xd8>)
 8007640:	429c      	cmp	r4, r3
 8007642:	bf08      	it	eq
 8007644:	68ec      	ldreq	r4, [r5, #12]
 8007646:	e7e6      	b.n	8007616 <__swsetup_r+0x1e>
 8007648:	0758      	lsls	r0, r3, #29
 800764a:	d512      	bpl.n	8007672 <__swsetup_r+0x7a>
 800764c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764e:	b141      	cbz	r1, 8007662 <__swsetup_r+0x6a>
 8007650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007654:	4299      	cmp	r1, r3
 8007656:	d002      	beq.n	800765e <__swsetup_r+0x66>
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff fc3d 	bl	8006ed8 <_free_r>
 800765e:	2300      	movs	r3, #0
 8007660:	6363      	str	r3, [r4, #52]	; 0x34
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	2300      	movs	r3, #0
 800766c:	6063      	str	r3, [r4, #4]
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f043 0308 	orr.w	r3, r3, #8
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	b94b      	cbnz	r3, 8007692 <__swsetup_r+0x9a>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007688:	d003      	beq.n	8007692 <__swsetup_r+0x9a>
 800768a:	4621      	mov	r1, r4
 800768c:	4630      	mov	r0, r6
 800768e:	f000 fa07 	bl	8007aa0 <__smakebuf_r>
 8007692:	89a0      	ldrh	r0, [r4, #12]
 8007694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007698:	f010 0301 	ands.w	r3, r0, #1
 800769c:	d00a      	beq.n	80076b4 <__swsetup_r+0xbc>
 800769e:	2300      	movs	r3, #0
 80076a0:	60a3      	str	r3, [r4, #8]
 80076a2:	6963      	ldr	r3, [r4, #20]
 80076a4:	425b      	negs	r3, r3
 80076a6:	61a3      	str	r3, [r4, #24]
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	b943      	cbnz	r3, 80076be <__swsetup_r+0xc6>
 80076ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b0:	d1ba      	bne.n	8007628 <__swsetup_r+0x30>
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	0781      	lsls	r1, r0, #30
 80076b6:	bf58      	it	pl
 80076b8:	6963      	ldrpl	r3, [r4, #20]
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	e7f4      	b.n	80076a8 <__swsetup_r+0xb0>
 80076be:	2000      	movs	r0, #0
 80076c0:	e7f7      	b.n	80076b2 <__swsetup_r+0xba>
 80076c2:	bf00      	nop
 80076c4:	20000018 	.word	0x20000018
 80076c8:	08007fbc 	.word	0x08007fbc
 80076cc:	08007fdc 	.word	0x08007fdc
 80076d0:	08007f9c 	.word	0x08007f9c

080076d4 <abort>:
 80076d4:	b508      	push	{r3, lr}
 80076d6:	2006      	movs	r0, #6
 80076d8:	f000 fa4a 	bl	8007b70 <raise>
 80076dc:	2001      	movs	r0, #1
 80076de:	f7f9 ff45 	bl	800156c <_exit>
	...

080076e4 <__sflush_r>:
 80076e4:	898a      	ldrh	r2, [r1, #12]
 80076e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ea:	4605      	mov	r5, r0
 80076ec:	0710      	lsls	r0, r2, #28
 80076ee:	460c      	mov	r4, r1
 80076f0:	d458      	bmi.n	80077a4 <__sflush_r+0xc0>
 80076f2:	684b      	ldr	r3, [r1, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dc05      	bgt.n	8007704 <__sflush_r+0x20>
 80076f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dc02      	bgt.n	8007704 <__sflush_r+0x20>
 80076fe:	2000      	movs	r0, #0
 8007700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007706:	2e00      	cmp	r6, #0
 8007708:	d0f9      	beq.n	80076fe <__sflush_r+0x1a>
 800770a:	2300      	movs	r3, #0
 800770c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007710:	682f      	ldr	r7, [r5, #0]
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	d032      	beq.n	800777c <__sflush_r+0x98>
 8007716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	075a      	lsls	r2, r3, #29
 800771c:	d505      	bpl.n	800772a <__sflush_r+0x46>
 800771e:	6863      	ldr	r3, [r4, #4]
 8007720:	1ac0      	subs	r0, r0, r3
 8007722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007724:	b10b      	cbz	r3, 800772a <__sflush_r+0x46>
 8007726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007728:	1ac0      	subs	r0, r0, r3
 800772a:	2300      	movs	r3, #0
 800772c:	4602      	mov	r2, r0
 800772e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007730:	6a21      	ldr	r1, [r4, #32]
 8007732:	4628      	mov	r0, r5
 8007734:	47b0      	blx	r6
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	d106      	bne.n	800774a <__sflush_r+0x66>
 800773c:	6829      	ldr	r1, [r5, #0]
 800773e:	291d      	cmp	r1, #29
 8007740:	d82c      	bhi.n	800779c <__sflush_r+0xb8>
 8007742:	4a2a      	ldr	r2, [pc, #168]	; (80077ec <__sflush_r+0x108>)
 8007744:	40ca      	lsrs	r2, r1
 8007746:	07d6      	lsls	r6, r2, #31
 8007748:	d528      	bpl.n	800779c <__sflush_r+0xb8>
 800774a:	2200      	movs	r2, #0
 800774c:	6062      	str	r2, [r4, #4]
 800774e:	04d9      	lsls	r1, r3, #19
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	6022      	str	r2, [r4, #0]
 8007754:	d504      	bpl.n	8007760 <__sflush_r+0x7c>
 8007756:	1c42      	adds	r2, r0, #1
 8007758:	d101      	bne.n	800775e <__sflush_r+0x7a>
 800775a:	682b      	ldr	r3, [r5, #0]
 800775c:	b903      	cbnz	r3, 8007760 <__sflush_r+0x7c>
 800775e:	6560      	str	r0, [r4, #84]	; 0x54
 8007760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007762:	602f      	str	r7, [r5, #0]
 8007764:	2900      	cmp	r1, #0
 8007766:	d0ca      	beq.n	80076fe <__sflush_r+0x1a>
 8007768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800776c:	4299      	cmp	r1, r3
 800776e:	d002      	beq.n	8007776 <__sflush_r+0x92>
 8007770:	4628      	mov	r0, r5
 8007772:	f7ff fbb1 	bl	8006ed8 <_free_r>
 8007776:	2000      	movs	r0, #0
 8007778:	6360      	str	r0, [r4, #52]	; 0x34
 800777a:	e7c1      	b.n	8007700 <__sflush_r+0x1c>
 800777c:	6a21      	ldr	r1, [r4, #32]
 800777e:	2301      	movs	r3, #1
 8007780:	4628      	mov	r0, r5
 8007782:	47b0      	blx	r6
 8007784:	1c41      	adds	r1, r0, #1
 8007786:	d1c7      	bne.n	8007718 <__sflush_r+0x34>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0c4      	beq.n	8007718 <__sflush_r+0x34>
 800778e:	2b1d      	cmp	r3, #29
 8007790:	d001      	beq.n	8007796 <__sflush_r+0xb2>
 8007792:	2b16      	cmp	r3, #22
 8007794:	d101      	bne.n	800779a <__sflush_r+0xb6>
 8007796:	602f      	str	r7, [r5, #0]
 8007798:	e7b1      	b.n	80076fe <__sflush_r+0x1a>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	e7ad      	b.n	8007700 <__sflush_r+0x1c>
 80077a4:	690f      	ldr	r7, [r1, #16]
 80077a6:	2f00      	cmp	r7, #0
 80077a8:	d0a9      	beq.n	80076fe <__sflush_r+0x1a>
 80077aa:	0793      	lsls	r3, r2, #30
 80077ac:	680e      	ldr	r6, [r1, #0]
 80077ae:	bf08      	it	eq
 80077b0:	694b      	ldreq	r3, [r1, #20]
 80077b2:	600f      	str	r7, [r1, #0]
 80077b4:	bf18      	it	ne
 80077b6:	2300      	movne	r3, #0
 80077b8:	eba6 0807 	sub.w	r8, r6, r7
 80077bc:	608b      	str	r3, [r1, #8]
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	dd9c      	ble.n	80076fe <__sflush_r+0x1a>
 80077c4:	6a21      	ldr	r1, [r4, #32]
 80077c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077c8:	4643      	mov	r3, r8
 80077ca:	463a      	mov	r2, r7
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b0      	blx	r6
 80077d0:	2800      	cmp	r0, #0
 80077d2:	dc06      	bgt.n	80077e2 <__sflush_r+0xfe>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e78e      	b.n	8007700 <__sflush_r+0x1c>
 80077e2:	4407      	add	r7, r0
 80077e4:	eba8 0800 	sub.w	r8, r8, r0
 80077e8:	e7e9      	b.n	80077be <__sflush_r+0xda>
 80077ea:	bf00      	nop
 80077ec:	20400001 	.word	0x20400001

080077f0 <_fflush_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	690b      	ldr	r3, [r1, #16]
 80077f4:	4605      	mov	r5, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b913      	cbnz	r3, 8007800 <_fflush_r+0x10>
 80077fa:	2500      	movs	r5, #0
 80077fc:	4628      	mov	r0, r5
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	b118      	cbz	r0, 800780a <_fflush_r+0x1a>
 8007802:	6983      	ldr	r3, [r0, #24]
 8007804:	b90b      	cbnz	r3, 800780a <_fflush_r+0x1a>
 8007806:	f000 f887 	bl	8007918 <__sinit>
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <_fflush_r+0x6c>)
 800780c:	429c      	cmp	r4, r3
 800780e:	d11b      	bne.n	8007848 <_fflush_r+0x58>
 8007810:	686c      	ldr	r4, [r5, #4]
 8007812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0ef      	beq.n	80077fa <_fflush_r+0xa>
 800781a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800781c:	07d0      	lsls	r0, r2, #31
 800781e:	d404      	bmi.n	800782a <_fflush_r+0x3a>
 8007820:	0599      	lsls	r1, r3, #22
 8007822:	d402      	bmi.n	800782a <_fflush_r+0x3a>
 8007824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007826:	f000 f915 	bl	8007a54 <__retarget_lock_acquire_recursive>
 800782a:	4628      	mov	r0, r5
 800782c:	4621      	mov	r1, r4
 800782e:	f7ff ff59 	bl	80076e4 <__sflush_r>
 8007832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007834:	07da      	lsls	r2, r3, #31
 8007836:	4605      	mov	r5, r0
 8007838:	d4e0      	bmi.n	80077fc <_fflush_r+0xc>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	059b      	lsls	r3, r3, #22
 800783e:	d4dd      	bmi.n	80077fc <_fflush_r+0xc>
 8007840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007842:	f000 f908 	bl	8007a56 <__retarget_lock_release_recursive>
 8007846:	e7d9      	b.n	80077fc <_fflush_r+0xc>
 8007848:	4b05      	ldr	r3, [pc, #20]	; (8007860 <_fflush_r+0x70>)
 800784a:	429c      	cmp	r4, r3
 800784c:	d101      	bne.n	8007852 <_fflush_r+0x62>
 800784e:	68ac      	ldr	r4, [r5, #8]
 8007850:	e7df      	b.n	8007812 <_fflush_r+0x22>
 8007852:	4b04      	ldr	r3, [pc, #16]	; (8007864 <_fflush_r+0x74>)
 8007854:	429c      	cmp	r4, r3
 8007856:	bf08      	it	eq
 8007858:	68ec      	ldreq	r4, [r5, #12]
 800785a:	e7da      	b.n	8007812 <_fflush_r+0x22>
 800785c:	08007fbc 	.word	0x08007fbc
 8007860:	08007fdc 	.word	0x08007fdc
 8007864:	08007f9c 	.word	0x08007f9c

08007868 <std>:
 8007868:	2300      	movs	r3, #0
 800786a:	b510      	push	{r4, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	e9c0 3300 	strd	r3, r3, [r0]
 8007872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007876:	6083      	str	r3, [r0, #8]
 8007878:	8181      	strh	r1, [r0, #12]
 800787a:	6643      	str	r3, [r0, #100]	; 0x64
 800787c:	81c2      	strh	r2, [r0, #14]
 800787e:	6183      	str	r3, [r0, #24]
 8007880:	4619      	mov	r1, r3
 8007882:	2208      	movs	r2, #8
 8007884:	305c      	adds	r0, #92	; 0x5c
 8007886:	f7fd fefd 	bl	8005684 <memset>
 800788a:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <std+0x38>)
 800788c:	6263      	str	r3, [r4, #36]	; 0x24
 800788e:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <std+0x3c>)
 8007890:	62a3      	str	r3, [r4, #40]	; 0x28
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <std+0x40>)
 8007894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <std+0x44>)
 8007898:	6224      	str	r4, [r4, #32]
 800789a:	6323      	str	r3, [r4, #48]	; 0x30
 800789c:	bd10      	pop	{r4, pc}
 800789e:	bf00      	nop
 80078a0:	08007ba9 	.word	0x08007ba9
 80078a4:	08007bcb 	.word	0x08007bcb
 80078a8:	08007c03 	.word	0x08007c03
 80078ac:	08007c27 	.word	0x08007c27

080078b0 <_cleanup_r>:
 80078b0:	4901      	ldr	r1, [pc, #4]	; (80078b8 <_cleanup_r+0x8>)
 80078b2:	f000 b8af 	b.w	8007a14 <_fwalk_reent>
 80078b6:	bf00      	nop
 80078b8:	080077f1 	.word	0x080077f1

080078bc <__sfmoreglue>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	1e4a      	subs	r2, r1, #1
 80078c0:	2568      	movs	r5, #104	; 0x68
 80078c2:	4355      	muls	r5, r2
 80078c4:	460e      	mov	r6, r1
 80078c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078ca:	f7fe fbc9 	bl	8006060 <_malloc_r>
 80078ce:	4604      	mov	r4, r0
 80078d0:	b140      	cbz	r0, 80078e4 <__sfmoreglue+0x28>
 80078d2:	2100      	movs	r1, #0
 80078d4:	e9c0 1600 	strd	r1, r6, [r0]
 80078d8:	300c      	adds	r0, #12
 80078da:	60a0      	str	r0, [r4, #8]
 80078dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078e0:	f7fd fed0 	bl	8005684 <memset>
 80078e4:	4620      	mov	r0, r4
 80078e6:	bd70      	pop	{r4, r5, r6, pc}

080078e8 <__sfp_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sfp_lock_acquire+0x8>)
 80078ea:	f000 b8b3 	b.w	8007a54 <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	200001ac 	.word	0x200001ac

080078f4 <__sfp_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sfp_lock_release+0x8>)
 80078f6:	f000 b8ae 	b.w	8007a56 <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	200001ac 	.word	0x200001ac

08007900 <__sinit_lock_acquire>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__sinit_lock_acquire+0x8>)
 8007902:	f000 b8a7 	b.w	8007a54 <__retarget_lock_acquire_recursive>
 8007906:	bf00      	nop
 8007908:	200001a7 	.word	0x200001a7

0800790c <__sinit_lock_release>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__sinit_lock_release+0x8>)
 800790e:	f000 b8a2 	b.w	8007a56 <__retarget_lock_release_recursive>
 8007912:	bf00      	nop
 8007914:	200001a7 	.word	0x200001a7

08007918 <__sinit>:
 8007918:	b510      	push	{r4, lr}
 800791a:	4604      	mov	r4, r0
 800791c:	f7ff fff0 	bl	8007900 <__sinit_lock_acquire>
 8007920:	69a3      	ldr	r3, [r4, #24]
 8007922:	b11b      	cbz	r3, 800792c <__sinit+0x14>
 8007924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007928:	f7ff bff0 	b.w	800790c <__sinit_lock_release>
 800792c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007930:	6523      	str	r3, [r4, #80]	; 0x50
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <__sinit+0x68>)
 8007934:	4a13      	ldr	r2, [pc, #76]	; (8007984 <__sinit+0x6c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	62a2      	str	r2, [r4, #40]	; 0x28
 800793a:	42a3      	cmp	r3, r4
 800793c:	bf04      	itt	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	61a3      	streq	r3, [r4, #24]
 8007942:	4620      	mov	r0, r4
 8007944:	f000 f820 	bl	8007988 <__sfp>
 8007948:	6060      	str	r0, [r4, #4]
 800794a:	4620      	mov	r0, r4
 800794c:	f000 f81c 	bl	8007988 <__sfp>
 8007950:	60a0      	str	r0, [r4, #8]
 8007952:	4620      	mov	r0, r4
 8007954:	f000 f818 	bl	8007988 <__sfp>
 8007958:	2200      	movs	r2, #0
 800795a:	60e0      	str	r0, [r4, #12]
 800795c:	2104      	movs	r1, #4
 800795e:	6860      	ldr	r0, [r4, #4]
 8007960:	f7ff ff82 	bl	8007868 <std>
 8007964:	68a0      	ldr	r0, [r4, #8]
 8007966:	2201      	movs	r2, #1
 8007968:	2109      	movs	r1, #9
 800796a:	f7ff ff7d 	bl	8007868 <std>
 800796e:	68e0      	ldr	r0, [r4, #12]
 8007970:	2202      	movs	r2, #2
 8007972:	2112      	movs	r1, #18
 8007974:	f7ff ff78 	bl	8007868 <std>
 8007978:	2301      	movs	r3, #1
 800797a:	61a3      	str	r3, [r4, #24]
 800797c:	e7d2      	b.n	8007924 <__sinit+0xc>
 800797e:	bf00      	nop
 8007980:	08007d30 	.word	0x08007d30
 8007984:	080078b1 	.word	0x080078b1

08007988 <__sfp>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	4607      	mov	r7, r0
 800798c:	f7ff ffac 	bl	80078e8 <__sfp_lock_acquire>
 8007990:	4b1e      	ldr	r3, [pc, #120]	; (8007a0c <__sfp+0x84>)
 8007992:	681e      	ldr	r6, [r3, #0]
 8007994:	69b3      	ldr	r3, [r6, #24]
 8007996:	b913      	cbnz	r3, 800799e <__sfp+0x16>
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff ffbd 	bl	8007918 <__sinit>
 800799e:	3648      	adds	r6, #72	; 0x48
 80079a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	d503      	bpl.n	80079b0 <__sfp+0x28>
 80079a8:	6833      	ldr	r3, [r6, #0]
 80079aa:	b30b      	cbz	r3, 80079f0 <__sfp+0x68>
 80079ac:	6836      	ldr	r6, [r6, #0]
 80079ae:	e7f7      	b.n	80079a0 <__sfp+0x18>
 80079b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079b4:	b9d5      	cbnz	r5, 80079ec <__sfp+0x64>
 80079b6:	4b16      	ldr	r3, [pc, #88]	; (8007a10 <__sfp+0x88>)
 80079b8:	60e3      	str	r3, [r4, #12]
 80079ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079be:	6665      	str	r5, [r4, #100]	; 0x64
 80079c0:	f000 f847 	bl	8007a52 <__retarget_lock_init_recursive>
 80079c4:	f7ff ff96 	bl	80078f4 <__sfp_lock_release>
 80079c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079d0:	6025      	str	r5, [r4, #0]
 80079d2:	61a5      	str	r5, [r4, #24]
 80079d4:	2208      	movs	r2, #8
 80079d6:	4629      	mov	r1, r5
 80079d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079dc:	f7fd fe52 	bl	8005684 <memset>
 80079e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079e8:	4620      	mov	r0, r4
 80079ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ec:	3468      	adds	r4, #104	; 0x68
 80079ee:	e7d9      	b.n	80079a4 <__sfp+0x1c>
 80079f0:	2104      	movs	r1, #4
 80079f2:	4638      	mov	r0, r7
 80079f4:	f7ff ff62 	bl	80078bc <__sfmoreglue>
 80079f8:	4604      	mov	r4, r0
 80079fa:	6030      	str	r0, [r6, #0]
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d1d5      	bne.n	80079ac <__sfp+0x24>
 8007a00:	f7ff ff78 	bl	80078f4 <__sfp_lock_release>
 8007a04:	230c      	movs	r3, #12
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	e7ee      	b.n	80079e8 <__sfp+0x60>
 8007a0a:	bf00      	nop
 8007a0c:	08007d30 	.word	0x08007d30
 8007a10:	ffff0001 	.word	0xffff0001

08007a14 <_fwalk_reent>:
 8007a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a18:	4606      	mov	r6, r0
 8007a1a:	4688      	mov	r8, r1
 8007a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a20:	2700      	movs	r7, #0
 8007a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a26:	f1b9 0901 	subs.w	r9, r9, #1
 8007a2a:	d505      	bpl.n	8007a38 <_fwalk_reent+0x24>
 8007a2c:	6824      	ldr	r4, [r4, #0]
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	d1f7      	bne.n	8007a22 <_fwalk_reent+0xe>
 8007a32:	4638      	mov	r0, r7
 8007a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a38:	89ab      	ldrh	r3, [r5, #12]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d907      	bls.n	8007a4e <_fwalk_reent+0x3a>
 8007a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a42:	3301      	adds	r3, #1
 8007a44:	d003      	beq.n	8007a4e <_fwalk_reent+0x3a>
 8007a46:	4629      	mov	r1, r5
 8007a48:	4630      	mov	r0, r6
 8007a4a:	47c0      	blx	r8
 8007a4c:	4307      	orrs	r7, r0
 8007a4e:	3568      	adds	r5, #104	; 0x68
 8007a50:	e7e9      	b.n	8007a26 <_fwalk_reent+0x12>

08007a52 <__retarget_lock_init_recursive>:
 8007a52:	4770      	bx	lr

08007a54 <__retarget_lock_acquire_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <__retarget_lock_release_recursive>:
 8007a56:	4770      	bx	lr

08007a58 <__swhatbuf_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	460e      	mov	r6, r1
 8007a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	b096      	sub	sp, #88	; 0x58
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	da07      	bge.n	8007a7a <__swhatbuf_r+0x22>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	89b3      	ldrh	r3, [r6, #12]
 8007a70:	061a      	lsls	r2, r3, #24
 8007a72:	d410      	bmi.n	8007a96 <__swhatbuf_r+0x3e>
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	e00e      	b.n	8007a98 <__swhatbuf_r+0x40>
 8007a7a:	466a      	mov	r2, sp
 8007a7c:	f000 f8fa 	bl	8007c74 <_fstat_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	dbf2      	blt.n	8007a6a <__swhatbuf_r+0x12>
 8007a84:	9a01      	ldr	r2, [sp, #4]
 8007a86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a8e:	425a      	negs	r2, r3
 8007a90:	415a      	adcs	r2, r3
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	e7ee      	b.n	8007a74 <__swhatbuf_r+0x1c>
 8007a96:	2340      	movs	r3, #64	; 0x40
 8007a98:	2000      	movs	r0, #0
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	b016      	add	sp, #88	; 0x58
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}

08007aa0 <__smakebuf_r>:
 8007aa0:	898b      	ldrh	r3, [r1, #12]
 8007aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa4:	079d      	lsls	r5, r3, #30
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	d507      	bpl.n	8007abc <__smakebuf_r+0x1c>
 8007aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	6163      	str	r3, [r4, #20]
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	ab01      	add	r3, sp, #4
 8007abe:	466a      	mov	r2, sp
 8007ac0:	f7ff ffca 	bl	8007a58 <__swhatbuf_r>
 8007ac4:	9900      	ldr	r1, [sp, #0]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7fe fac9 	bl	8006060 <_malloc_r>
 8007ace:	b948      	cbnz	r0, 8007ae4 <__smakebuf_r+0x44>
 8007ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad4:	059a      	lsls	r2, r3, #22
 8007ad6:	d4ef      	bmi.n	8007ab8 <__smakebuf_r+0x18>
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	f043 0302 	orr.w	r3, r3, #2
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e7e3      	b.n	8007aac <__smakebuf_r+0xc>
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <__smakebuf_r+0x7c>)
 8007ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	6020      	str	r0, [r4, #0]
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	9b00      	ldr	r3, [sp, #0]
 8007af4:	6163      	str	r3, [r4, #20]
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	6120      	str	r0, [r4, #16]
 8007afa:	b15b      	cbz	r3, 8007b14 <__smakebuf_r+0x74>
 8007afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f8c9 	bl	8007c98 <_isatty_r>
 8007b06:	b128      	cbz	r0, 8007b14 <__smakebuf_r+0x74>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f023 0303 	bic.w	r3, r3, #3
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	89a0      	ldrh	r0, [r4, #12]
 8007b16:	4305      	orrs	r5, r0
 8007b18:	81a5      	strh	r5, [r4, #12]
 8007b1a:	e7cd      	b.n	8007ab8 <__smakebuf_r+0x18>
 8007b1c:	080078b1 	.word	0x080078b1

08007b20 <_raise_r>:
 8007b20:	291f      	cmp	r1, #31
 8007b22:	b538      	push	{r3, r4, r5, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	460d      	mov	r5, r1
 8007b28:	d904      	bls.n	8007b34 <_raise_r+0x14>
 8007b2a:	2316      	movs	r3, #22
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b36:	b112      	cbz	r2, 8007b3e <_raise_r+0x1e>
 8007b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b3c:	b94b      	cbnz	r3, 8007b52 <_raise_r+0x32>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 f830 	bl	8007ba4 <_getpid_r>
 8007b44:	462a      	mov	r2, r5
 8007b46:	4601      	mov	r1, r0
 8007b48:	4620      	mov	r0, r4
 8007b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b4e:	f000 b817 	b.w	8007b80 <_kill_r>
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d00a      	beq.n	8007b6c <_raise_r+0x4c>
 8007b56:	1c59      	adds	r1, r3, #1
 8007b58:	d103      	bne.n	8007b62 <_raise_r+0x42>
 8007b5a:	2316      	movs	r3, #22
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	2001      	movs	r0, #1
 8007b60:	e7e7      	b.n	8007b32 <_raise_r+0x12>
 8007b62:	2400      	movs	r4, #0
 8007b64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b68:	4628      	mov	r0, r5
 8007b6a:	4798      	blx	r3
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7e0      	b.n	8007b32 <_raise_r+0x12>

08007b70 <raise>:
 8007b70:	4b02      	ldr	r3, [pc, #8]	; (8007b7c <raise+0xc>)
 8007b72:	4601      	mov	r1, r0
 8007b74:	6818      	ldr	r0, [r3, #0]
 8007b76:	f7ff bfd3 	b.w	8007b20 <_raise_r>
 8007b7a:	bf00      	nop
 8007b7c:	20000018 	.word	0x20000018

08007b80 <_kill_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	; (8007ba0 <_kill_r+0x20>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	f7f9 fcdd 	bl	800154c <_kill>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	d102      	bne.n	8007b9c <_kill_r+0x1c>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b103      	cbz	r3, 8007b9c <_kill_r+0x1c>
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200001a0 	.word	0x200001a0

08007ba4 <_getpid_r>:
 8007ba4:	f7f9 bcca 	b.w	800153c <_getpid>

08007ba8 <__sread>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	460c      	mov	r4, r1
 8007bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb0:	f000 f894 	bl	8007cdc <_read_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	bfab      	itete	ge
 8007bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bba:	89a3      	ldrhlt	r3, [r4, #12]
 8007bbc:	181b      	addge	r3, r3, r0
 8007bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bc2:	bfac      	ite	ge
 8007bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bc6:	81a3      	strhlt	r3, [r4, #12]
 8007bc8:	bd10      	pop	{r4, pc}

08007bca <__swrite>:
 8007bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bce:	461f      	mov	r7, r3
 8007bd0:	898b      	ldrh	r3, [r1, #12]
 8007bd2:	05db      	lsls	r3, r3, #23
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	4616      	mov	r6, r2
 8007bda:	d505      	bpl.n	8007be8 <__swrite+0x1e>
 8007bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be0:	2302      	movs	r3, #2
 8007be2:	2200      	movs	r2, #0
 8007be4:	f000 f868 	bl	8007cb8 <_lseek_r>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf2:	81a3      	strh	r3, [r4, #12]
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	f000 b817 	b.w	8007c30 <_write_r>

08007c02 <__sseek>:
 8007c02:	b510      	push	{r4, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0a:	f000 f855 	bl	8007cb8 <_lseek_r>
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	bf15      	itete	ne
 8007c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c1e:	81a3      	strheq	r3, [r4, #12]
 8007c20:	bf18      	it	ne
 8007c22:	81a3      	strhne	r3, [r4, #12]
 8007c24:	bd10      	pop	{r4, pc}

08007c26 <__sclose>:
 8007c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2a:	f000 b813 	b.w	8007c54 <_close_r>
	...

08007c30 <_write_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_write_r+0x20>)
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7f9 fcbb 	bl	80015ba <_write>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_write_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_write_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	200001a0 	.word	0x200001a0

08007c54 <_close_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_close_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 fcc7 	bl	80015f2 <_close>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_close_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_close_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200001a0 	.word	0x200001a0

08007c74 <_fstat_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	; (8007c94 <_fstat_r+0x20>)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	4611      	mov	r1, r2
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	f7f9 fcc2 	bl	800160a <_fstat>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	d102      	bne.n	8007c90 <_fstat_r+0x1c>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	b103      	cbz	r3, 8007c90 <_fstat_r+0x1c>
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	bd38      	pop	{r3, r4, r5, pc}
 8007c92:	bf00      	nop
 8007c94:	200001a0 	.word	0x200001a0

08007c98 <_isatty_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d06      	ldr	r5, [pc, #24]	; (8007cb4 <_isatty_r+0x1c>)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	f7f9 fcc1 	bl	800162a <_isatty>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_isatty_r+0x1a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_isatty_r+0x1a>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200001a0 	.word	0x200001a0

08007cb8 <_lseek_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	; (8007cd8 <_lseek_r+0x20>)
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	602a      	str	r2, [r5, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f7f9 fcba 	bl	8001640 <_lseek>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_lseek_r+0x1e>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_lseek_r+0x1e>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	200001a0 	.word	0x200001a0

08007cdc <_read_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d07      	ldr	r5, [pc, #28]	; (8007cfc <_read_r+0x20>)
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	4608      	mov	r0, r1
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	602a      	str	r2, [r5, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f7f9 fc48 	bl	8001580 <_read>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_read_r+0x1e>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_read_r+0x1e>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	200001a0 	.word	0x200001a0

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
